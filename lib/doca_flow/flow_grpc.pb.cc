// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flow_grpc.proto

#include "flow_grpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flow_grpc {
constexpr Response::Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pipe_id_(uint64_t{0u}){}
struct ResponseDefaultTypeInternal {
  constexpr ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseDefaultTypeInternal _Response_default_instance_;
constexpr Error::Error(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_type_(0){}
struct ErrorDefaultTypeInternal {
  constexpr ErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrorDefaultTypeInternal() {}
  union {
    Error _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrorDefaultTypeInternal _Error_default_instance_;
constexpr DPDKConfig::DPDKConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_port_config_(nullptr)
  , reserve_main_thread_(false){}
struct DPDKConfigDefaultTypeInternal {
  constexpr DPDKConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DPDKConfigDefaultTypeInternal() {}
  union {
    DPDKConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DPDKConfigDefaultTypeInternal _DPDKConfig_default_instance_;
constexpr APPPortConfig::APPPortConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nb_ports_(0)
  , nb_queues_(0)
  , nb_hairpin_q_(0){}
struct APPPortConfigDefaultTypeInternal {
  constexpr APPPortConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~APPPortConfigDefaultTypeInternal() {}
  union {
    APPPortConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT APPPortConfigDefaultTypeInternal _APPPortConfig_default_instance_;
constexpr GRPCConfig::GRPCConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nb_queues_(0){}
struct GRPCConfigDefaultTypeInternal {
  constexpr GRPCConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GRPCConfigDefaultTypeInternal() {}
  union {
    GRPCConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GRPCConfigDefaultTypeInternal _GRPCConfig_default_instance_;
constexpr FlowPortConfig::FlowPortConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : port_id_(0u)
  , port_type_(0){}
struct FlowPortConfigDefaultTypeInternal {
  constexpr FlowPortConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlowPortConfigDefaultTypeInternal() {}
  union {
    FlowPortConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlowPortConfigDefaultTypeInternal _FlowPortConfig_default_instance_;
constexpr PortPairRequest::PortPairRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : port_id1_(0u)
  , port_id2_(0u){}
struct PortPairRequestDefaultTypeInternal {
  constexpr PortPairRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PortPairRequestDefaultTypeInternal() {}
  union {
    PortPairRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PortPairRequestDefaultTypeInternal _PortPairRequest_default_instance_;
constexpr PipeConfig::PipeConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , match_(nullptr)
  , action_(nullptr)
  , type_(0)
  , port_id_(0u)
  , is_root_(false)
  , nb_flows_(0u){}
struct PipeConfigDefaultTypeInternal {
  constexpr PipeConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PipeConfigDefaultTypeInternal() {}
  union {
    PipeConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PipeConfigDefaultTypeInternal _PipeConfig_default_instance_;
constexpr Match::Match(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_rule_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MatchDefaultTypeInternal {
  constexpr MatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MatchDefaultTypeInternal() {}
  union {
    Match _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MatchDefaultTypeInternal _Match_default_instance_;
constexpr Action::Action(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_rule_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ActionDefaultTypeInternal {
  constexpr ActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionDefaultTypeInternal() {}
  union {
    Action _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionDefaultTypeInternal _Action_default_instance_;
constexpr FWD::FWD(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fwd_rule_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FWDDefaultTypeInternal {
  constexpr FWDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FWDDefaultTypeInternal() {}
  union {
    FWD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FWDDefaultTypeInternal _FWD_default_instance_;
constexpr CreatePipeRequest::CreatePipeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pipe_config_(nullptr)
  , fwd_(nullptr)
  , fwd_miss_(nullptr){}
struct CreatePipeRequestDefaultTypeInternal {
  constexpr CreatePipeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreatePipeRequestDefaultTypeInternal() {}
  union {
    CreatePipeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreatePipeRequestDefaultTypeInternal _CreatePipeRequest_default_instance_;
constexpr AddEntryRequest::AddEntryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_(nullptr)
  , action_(nullptr)
  , fwd_(nullptr)
  , pipe_id_(uint64_t{0u})
  , pipe_queue_(0u)
  , flags_(0u){}
struct AddEntryRequestDefaultTypeInternal {
  constexpr AddEntryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddEntryRequestDefaultTypeInternal() {}
  union {
    AddEntryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddEntryRequestDefaultTypeInternal _AddEntryRequest_default_instance_;
constexpr PortDumpRequest::PortDumpRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_id_(0u){}
struct PortDumpRequestDefaultTypeInternal {
  constexpr PortDumpRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PortDumpRequestDefaultTypeInternal() {}
  union {
    PortDumpRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PortDumpRequestDefaultTypeInternal _PortDumpRequest_default_instance_;
constexpr QueryRequest::QueryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entry_id_(uint64_t{0u})
  , total_bytes_(uint64_t{0u})
  , total_pkts_(uint64_t{0u}){}
struct QueryRequestDefaultTypeInternal {
  constexpr QueryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryRequestDefaultTypeInternal() {}
  union {
    QueryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryRequestDefaultTypeInternal _QueryRequest_default_instance_;
constexpr PortFlushRequest::PortFlushRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : port_id_(0u){}
struct PortFlushRequestDefaultTypeInternal {
  constexpr PortFlushRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PortFlushRequestDefaultTypeInternal() {}
  union {
    PortFlushRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PortFlushRequestDefaultTypeInternal _PortFlushRequest_default_instance_;
constexpr RmEntryRequest::RmEntryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entry_id_(uint64_t{0u})
  , pipe_queue_(0u){}
struct RmEntryRequestDefaultTypeInternal {
  constexpr RmEntryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RmEntryRequestDefaultTypeInternal() {}
  union {
    RmEntryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RmEntryRequestDefaultTypeInternal _RmEntryRequest_default_instance_;
constexpr DestroyPipeRequest::DestroyPipeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pipe_id_(uint64_t{0u})
  , port_id_(0u){}
struct DestroyPipeRequestDefaultTypeInternal {
  constexpr DestroyPipeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DestroyPipeRequestDefaultTypeInternal() {}
  union {
    DestroyPipeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DestroyPipeRequestDefaultTypeInternal _DestroyPipeRequest_default_instance_;
constexpr EnvDestroyRequest::EnvDestroyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EnvDestroyRequestDefaultTypeInternal {
  constexpr EnvDestroyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnvDestroyRequestDefaultTypeInternal() {}
  union {
    EnvDestroyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnvDestroyRequestDefaultTypeInternal _EnvDestroyRequest_default_instance_;
constexpr DestroyPortRequest::DestroyPortRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : port_id_(0u){}
struct DestroyPortRequestDefaultTypeInternal {
  constexpr DestroyPortRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DestroyPortRequestDefaultTypeInternal() {}
  union {
    DestroyPortRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DestroyPortRequestDefaultTypeInternal _DestroyPortRequest_default_instance_;
}  // namespace flow_grpc
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flow_5fgrpc_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flow_5fgrpc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flow_5fgrpc_2eproto = nullptr;

const uint32_t TableStruct_flow_5fgrpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::Response, pipe_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::Error, error_type_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::Error, error_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::DPDKConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::DPDKConfig, app_port_config_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::DPDKConfig, reserve_main_thread_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::APPPortConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::APPPortConfig, nb_ports_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::APPPortConfig, nb_queues_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::APPPortConfig, nb_hairpin_q_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::GRPCConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::GRPCConfig, nb_queues_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::FlowPortConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::FlowPortConfig, port_id_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::FlowPortConfig, port_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::PortPairRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::PortPairRequest, port_id1_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::PortPairRequest, port_id2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::PipeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::PipeConfig, name_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::PipeConfig, type_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::PipeConfig, port_id_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::PipeConfig, is_root_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::PipeConfig, match_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::PipeConfig, action_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::PipeConfig, nb_flows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::Match, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::Match, match_rule_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::Action, action_rule_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::FWD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::FWD, fwd_rule_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::CreatePipeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::CreatePipeRequest, pipe_config_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::CreatePipeRequest, fwd_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::CreatePipeRequest, fwd_miss_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::AddEntryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::AddEntryRequest, pipe_queue_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::AddEntryRequest, pipe_id_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::AddEntryRequest, match_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::AddEntryRequest, action_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::AddEntryRequest, fwd_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::AddEntryRequest, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::PortDumpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::PortDumpRequest, port_id_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::PortDumpRequest, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::QueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::QueryRequest, entry_id_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::QueryRequest, total_bytes_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::QueryRequest, total_pkts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::PortFlushRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::PortFlushRequest, port_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::RmEntryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::RmEntryRequest, pipe_queue_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::RmEntryRequest, entry_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::DestroyPipeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::DestroyPipeRequest, port_id_),
  PROTOBUF_FIELD_OFFSET(::flow_grpc::DestroyPipeRequest, pipe_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::EnvDestroyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::DestroyPortRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flow_grpc::DestroyPortRequest, port_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flow_grpc::Response)},
  { 7, -1, -1, sizeof(::flow_grpc::Error)},
  { 15, -1, -1, sizeof(::flow_grpc::DPDKConfig)},
  { 23, -1, -1, sizeof(::flow_grpc::APPPortConfig)},
  { 32, -1, -1, sizeof(::flow_grpc::GRPCConfig)},
  { 39, -1, -1, sizeof(::flow_grpc::FlowPortConfig)},
  { 47, -1, -1, sizeof(::flow_grpc::PortPairRequest)},
  { 55, -1, -1, sizeof(::flow_grpc::PipeConfig)},
  { 68, -1, -1, sizeof(::flow_grpc::Match)},
  { 75, -1, -1, sizeof(::flow_grpc::Action)},
  { 82, -1, -1, sizeof(::flow_grpc::FWD)},
  { 89, -1, -1, sizeof(::flow_grpc::CreatePipeRequest)},
  { 98, -1, -1, sizeof(::flow_grpc::AddEntryRequest)},
  { 110, -1, -1, sizeof(::flow_grpc::PortDumpRequest)},
  { 118, -1, -1, sizeof(::flow_grpc::QueryRequest)},
  { 127, -1, -1, sizeof(::flow_grpc::PortFlushRequest)},
  { 134, -1, -1, sizeof(::flow_grpc::RmEntryRequest)},
  { 142, -1, -1, sizeof(::flow_grpc::DestroyPipeRequest)},
  { 150, -1, -1, sizeof(::flow_grpc::EnvDestroyRequest)},
  { 156, -1, -1, sizeof(::flow_grpc::DestroyPortRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow_grpc::_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow_grpc::_Error_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow_grpc::_DPDKConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow_grpc::_APPPortConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow_grpc::_GRPCConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow_grpc::_FlowPortConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow_grpc::_PortPairRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow_grpc::_PipeConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow_grpc::_Match_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow_grpc::_Action_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow_grpc::_FWD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow_grpc::_CreatePipeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow_grpc::_AddEntryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow_grpc::_PortDumpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow_grpc::_QueryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow_grpc::_PortFlushRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow_grpc::_RmEntryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow_grpc::_DestroyPipeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow_grpc::_EnvDestroyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flow_grpc::_DestroyPortRequest_default_instance_),
};

const char descriptor_table_protodef_flow_5fgrpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017flow_grpc.proto\022\tflow_grpc\"\033\n\010Response"
  "\022\017\n\007pipe_id\030\001 \001(\004\".\n\005Error\022\022\n\nerror_type"
  "\030\001 \001(\005\022\021\n\terror_msg\030\002 \001(\t\"\\\n\nDPDKConfig\022"
  "1\n\017app_port_config\030\001 \001(\0132\030.flow_grpc.APP"
  "PortConfig\022\033\n\023reserve_main_thread\030\002 \001(\010\""
  "J\n\rAPPPortConfig\022\020\n\010nb_ports\030\001 \001(\005\022\021\n\tnb"
  "_queues\030\002 \001(\005\022\024\n\014nb_hairpin_q\030\003 \001(\005\"\037\n\nG"
  "RPCConfig\022\021\n\tnb_queues\030\001 \001(\005\"4\n\016FlowPort"
  "Config\022\017\n\007port_id\030\001 \001(\r\022\021\n\tport_type\030\002 \001"
  "(\005\"5\n\017PortPairRequest\022\020\n\010port_id1\030\001 \001(\r\022"
  "\020\n\010port_id2\030\002 \001(\r\"\240\001\n\nPipeConfig\022\014\n\004name"
  "\030\001 \001(\t\022\014\n\004type\030\002 \001(\005\022\017\n\007port_id\030\003 \001(\r\022\017\n"
  "\007is_root\030\004 \001(\010\022\037\n\005match\030\005 \001(\0132\020.flow_grp"
  "c.Match\022!\n\006action\030\006 \001(\0132\021.flow_grpc.Acti"
  "on\022\020\n\010nb_flows\030\007 \001(\r\"\033\n\005Match\022\022\n\nmatch_r"
  "ule\030\001 \001(\t\"\035\n\006Action\022\023\n\013action_rule\030\001 \001(\t"
  "\"\027\n\003FWD\022\020\n\010fwd_rule\030\001 \001(\t\"~\n\021CreatePipeR"
  "equest\022*\n\013pipe_config\030\001 \001(\0132\025.flow_grpc."
  "PipeConfig\022\033\n\003fwd\030\002 \001(\0132\016.flow_grpc.FWD\022"
  " \n\010fwd_miss\030\003 \001(\0132\016.flow_grpc.FWD\"\246\001\n\017Ad"
  "dEntryRequest\022\022\n\npipe_queue\030\001 \001(\r\022\017\n\007pip"
  "e_id\030\002 \001(\004\022\037\n\005match\030\003 \001(\0132\020.flow_grpc.Ma"
  "tch\022!\n\006action\030\004 \001(\0132\021.flow_grpc.Action\022\033"
  "\n\003fwd\030\005 \001(\0132\016.flow_grpc.FWD\022\r\n\005flags\030\006 \001"
  "(\r\"2\n\017PortDumpRequest\022\017\n\007port_id\030\001 \001(\r\022\016"
  "\n\006result\030\002 \001(\t\"I\n\014QueryRequest\022\020\n\010entry_"
  "id\030\001 \001(\004\022\023\n\013total_bytes\030\002 \001(\004\022\022\n\ntotal_p"
  "kts\030\003 \001(\004\"#\n\020PortFlushRequest\022\017\n\007port_id"
  "\030\001 \001(\r\"6\n\016RmEntryRequest\022\022\n\npipe_queue\030\001"
  " \001(\r\022\020\n\010entry_id\030\002 \001(\004\"6\n\022DestroyPipeReq"
  "uest\022\017\n\007port_id\030\001 \001(\r\022\017\n\007pipe_id\030\002 \001(\004\"\023"
  "\n\021EnvDestroyRequest\"%\n\022DestroyPortReques"
  "t\022\017\n\007port_id\030\001 \001(\r2\267\006\n\010FlowGRPC\022;\n\rEnvIn"
  "itialize\022\025.flow_grpc.DPDKConfig\032\023.flow_g"
  "rpc.Response\022<\n\016GRPCInitialize\022\025.flow_gr"
  "pc.GRPCConfig\032\023.flow_grpc.Response\022;\n\tPo"
  "rtStart\022\031.flow_grpc.FlowPortConfig\032\023.flo"
  "w_grpc.Response\022;\n\010PortPair\022\032.flow_grpc."
  "PortPairRequest\032\023.flow_grpc.Response\022\?\n\n"
  "CreatePipe\022\034.flow_grpc.CreatePipeRequest"
  "\032\023.flow_grpc.Response\022;\n\010AddEntry\022\032.flow"
  "_grpc.AddEntryRequest\032\023.flow_grpc.Respon"
  "se\022@\n\rPortPipesDump\022\032.flow_grpc.PortDump"
  "Request\032\023.flow_grpc.Response\0225\n\005Query\022\027."
  "flow_grpc.QueryRequest\032\023.flow_grpc.Respo"
  "nse\022=\n\tFlushPort\022\033.flow_grpc.PortFlushRe"
  "quest\032\023.flow_grpc.Response\0229\n\007RmEntry\022\031."
  "flow_grpc.RmEntryRequest\032\023.flow_grpc.Res"
  "ponse\022A\n\013DestroyPipe\022\035.flow_grpc.Destroy"
  "PipeRequest\032\023.flow_grpc.Response\022\?\n\nEnvD"
  "estroy\022\034.flow_grpc.EnvDestroyRequest\032\023.f"
  "low_grpc.Response\022A\n\013DestroyPort\022\035.flow_"
  "grpc.DestroyPortRequest\032\023.flow_grpc.Resp"
  "onseb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flow_5fgrpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flow_5fgrpc_2eproto = {
  false, false, 2132, descriptor_table_protodef_flow_5fgrpc_2eproto, "flow_grpc.proto", 
  &descriptor_table_flow_5fgrpc_2eproto_once, nullptr, 0, 20,
  schemas, file_default_instances, TableStruct_flow_5fgrpc_2eproto::offsets,
  file_level_metadata_flow_5fgrpc_2eproto, file_level_enum_descriptors_flow_5fgrpc_2eproto, file_level_service_descriptors_flow_5fgrpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flow_5fgrpc_2eproto_getter() {
  return &descriptor_table_flow_5fgrpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flow_5fgrpc_2eproto(&descriptor_table_flow_5fgrpc_2eproto);
namespace flow_grpc {

// ===================================================================

class Response::_Internal {
 public:
};

Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow_grpc.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pipe_id_ = from.pipe_id_;
  // @@protoc_insertion_point(copy_constructor:flow_grpc.Response)
}

inline void Response::SharedCtor() {
pipe_id_ = uint64_t{0u};
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:flow_grpc.Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:flow_grpc.Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pipe_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pipe_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pipe_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow_grpc.Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pipe_id = 1;
  if (this->_internal_pipe_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pipe_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow_grpc.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow_grpc.Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 pipe_id = 1;
  if (this->_internal_pipe_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_pipe_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }

void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Response *>(to)->MergeFrom(
      static_cast<const Response &>(from));
}


void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow_grpc.Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pipe_id() != 0) {
    _internal_set_pipe_id(from._internal_pipe_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow_grpc.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(pipe_id_, other->pipe_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_5fgrpc_2eproto_getter, &descriptor_table_flow_5fgrpc_2eproto_once,
      file_level_metadata_flow_5fgrpc_2eproto[0]);
}

// ===================================================================

class Error::_Internal {
 public:
};

Error::Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow_grpc.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_msg().empty()) {
    error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_msg(), 
      GetArenaForAllocation());
  }
  error_type_ = from.error_type_;
  // @@protoc_insertion_point(copy_constructor:flow_grpc.Error)
}

inline void Error::SharedCtor() {
error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_type_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:flow_grpc.Error)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Error::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Error::ArenaDtor(void* object) {
  Error* _this = reinterpret_cast< Error* >(object);
  (void)_this;
}
void Error::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:flow_grpc.Error)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msg_.ClearToEmpty();
  error_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 error_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          error_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flow_grpc.Error.error_msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Error::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow_grpc.Error)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_type = 1;
  if (this->_internal_error_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error_type(), target);
  }

  // string error_msg = 2;
  if (!this->_internal_error_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_msg().data(), static_cast<int>(this->_internal_error_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flow_grpc.Error.error_msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow_grpc.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow_grpc.Error)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_msg = 2;
  if (!this->_internal_error_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_msg());
  }

  // int32 error_type = 1;
  if (this->_internal_error_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_error_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Error::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Error::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Error::GetClassData() const { return &_class_data_; }

void Error::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Error *>(to)->MergeFrom(
      static_cast<const Error &>(from));
}


void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow_grpc.Error)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_msg().empty()) {
    _internal_set_error_msg(from._internal_error_msg());
  }
  if (from._internal_error_type() != 0) {
    _internal_set_error_type(from._internal_error_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow_grpc.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::InternalSwap(Error* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_msg_, lhs_arena,
      &other->error_msg_, rhs_arena
  );
  swap(error_type_, other->error_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Error::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_5fgrpc_2eproto_getter, &descriptor_table_flow_5fgrpc_2eproto_once,
      file_level_metadata_flow_5fgrpc_2eproto[1]);
}

// ===================================================================

class DPDKConfig::_Internal {
 public:
  static const ::flow_grpc::APPPortConfig& app_port_config(const DPDKConfig* msg);
};

const ::flow_grpc::APPPortConfig&
DPDKConfig::_Internal::app_port_config(const DPDKConfig* msg) {
  return *msg->app_port_config_;
}
DPDKConfig::DPDKConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow_grpc.DPDKConfig)
}
DPDKConfig::DPDKConfig(const DPDKConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_app_port_config()) {
    app_port_config_ = new ::flow_grpc::APPPortConfig(*from.app_port_config_);
  } else {
    app_port_config_ = nullptr;
  }
  reserve_main_thread_ = from.reserve_main_thread_;
  // @@protoc_insertion_point(copy_constructor:flow_grpc.DPDKConfig)
}

inline void DPDKConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_port_config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reserve_main_thread_) -
    reinterpret_cast<char*>(&app_port_config_)) + sizeof(reserve_main_thread_));
}

DPDKConfig::~DPDKConfig() {
  // @@protoc_insertion_point(destructor:flow_grpc.DPDKConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DPDKConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete app_port_config_;
}

void DPDKConfig::ArenaDtor(void* object) {
  DPDKConfig* _this = reinterpret_cast< DPDKConfig* >(object);
  (void)_this;
}
void DPDKConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DPDKConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DPDKConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:flow_grpc.DPDKConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && app_port_config_ != nullptr) {
    delete app_port_config_;
  }
  app_port_config_ = nullptr;
  reserve_main_thread_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DPDKConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .flow_grpc.APPPortConfig app_port_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_port_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool reserve_main_thread = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          reserve_main_thread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DPDKConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow_grpc.DPDKConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .flow_grpc.APPPortConfig app_port_config = 1;
  if (this->_internal_has_app_port_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::app_port_config(this), target, stream);
  }

  // bool reserve_main_thread = 2;
  if (this->_internal_reserve_main_thread() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_reserve_main_thread(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow_grpc.DPDKConfig)
  return target;
}

size_t DPDKConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow_grpc.DPDKConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flow_grpc.APPPortConfig app_port_config = 1;
  if (this->_internal_has_app_port_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_port_config_);
  }

  // bool reserve_main_thread = 2;
  if (this->_internal_reserve_main_thread() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DPDKConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DPDKConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DPDKConfig::GetClassData() const { return &_class_data_; }

void DPDKConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DPDKConfig *>(to)->MergeFrom(
      static_cast<const DPDKConfig &>(from));
}


void DPDKConfig::MergeFrom(const DPDKConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow_grpc.DPDKConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_app_port_config()) {
    _internal_mutable_app_port_config()->::flow_grpc::APPPortConfig::MergeFrom(from._internal_app_port_config());
  }
  if (from._internal_reserve_main_thread() != 0) {
    _internal_set_reserve_main_thread(from._internal_reserve_main_thread());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DPDKConfig::CopyFrom(const DPDKConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow_grpc.DPDKConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DPDKConfig::IsInitialized() const {
  return true;
}

void DPDKConfig::InternalSwap(DPDKConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DPDKConfig, reserve_main_thread_)
      + sizeof(DPDKConfig::reserve_main_thread_)
      - PROTOBUF_FIELD_OFFSET(DPDKConfig, app_port_config_)>(
          reinterpret_cast<char*>(&app_port_config_),
          reinterpret_cast<char*>(&other->app_port_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DPDKConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_5fgrpc_2eproto_getter, &descriptor_table_flow_5fgrpc_2eproto_once,
      file_level_metadata_flow_5fgrpc_2eproto[2]);
}

// ===================================================================

class APPPortConfig::_Internal {
 public:
};

APPPortConfig::APPPortConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow_grpc.APPPortConfig)
}
APPPortConfig::APPPortConfig(const APPPortConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nb_ports_, &from.nb_ports_,
    static_cast<size_t>(reinterpret_cast<char*>(&nb_hairpin_q_) -
    reinterpret_cast<char*>(&nb_ports_)) + sizeof(nb_hairpin_q_));
  // @@protoc_insertion_point(copy_constructor:flow_grpc.APPPortConfig)
}

inline void APPPortConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nb_ports_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nb_hairpin_q_) -
    reinterpret_cast<char*>(&nb_ports_)) + sizeof(nb_hairpin_q_));
}

APPPortConfig::~APPPortConfig() {
  // @@protoc_insertion_point(destructor:flow_grpc.APPPortConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void APPPortConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void APPPortConfig::ArenaDtor(void* object) {
  APPPortConfig* _this = reinterpret_cast< APPPortConfig* >(object);
  (void)_this;
}
void APPPortConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void APPPortConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void APPPortConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:flow_grpc.APPPortConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&nb_ports_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nb_hairpin_q_) -
      reinterpret_cast<char*>(&nb_ports_)) + sizeof(nb_hairpin_q_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APPPortConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 nb_ports = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          nb_ports_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nb_queues = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          nb_queues_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nb_hairpin_q = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          nb_hairpin_q_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APPPortConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow_grpc.APPPortConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nb_ports = 1;
  if (this->_internal_nb_ports() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_nb_ports(), target);
  }

  // int32 nb_queues = 2;
  if (this->_internal_nb_queues() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nb_queues(), target);
  }

  // int32 nb_hairpin_q = 3;
  if (this->_internal_nb_hairpin_q() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_nb_hairpin_q(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow_grpc.APPPortConfig)
  return target;
}

size_t APPPortConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow_grpc.APPPortConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 nb_ports = 1;
  if (this->_internal_nb_ports() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nb_ports());
  }

  // int32 nb_queues = 2;
  if (this->_internal_nb_queues() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nb_queues());
  }

  // int32 nb_hairpin_q = 3;
  if (this->_internal_nb_hairpin_q() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nb_hairpin_q());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APPPortConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    APPPortConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APPPortConfig::GetClassData() const { return &_class_data_; }

void APPPortConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<APPPortConfig *>(to)->MergeFrom(
      static_cast<const APPPortConfig &>(from));
}


void APPPortConfig::MergeFrom(const APPPortConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow_grpc.APPPortConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_nb_ports() != 0) {
    _internal_set_nb_ports(from._internal_nb_ports());
  }
  if (from._internal_nb_queues() != 0) {
    _internal_set_nb_queues(from._internal_nb_queues());
  }
  if (from._internal_nb_hairpin_q() != 0) {
    _internal_set_nb_hairpin_q(from._internal_nb_hairpin_q());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APPPortConfig::CopyFrom(const APPPortConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow_grpc.APPPortConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APPPortConfig::IsInitialized() const {
  return true;
}

void APPPortConfig::InternalSwap(APPPortConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(APPPortConfig, nb_hairpin_q_)
      + sizeof(APPPortConfig::nb_hairpin_q_)
      - PROTOBUF_FIELD_OFFSET(APPPortConfig, nb_ports_)>(
          reinterpret_cast<char*>(&nb_ports_),
          reinterpret_cast<char*>(&other->nb_ports_));
}

::PROTOBUF_NAMESPACE_ID::Metadata APPPortConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_5fgrpc_2eproto_getter, &descriptor_table_flow_5fgrpc_2eproto_once,
      file_level_metadata_flow_5fgrpc_2eproto[3]);
}

// ===================================================================

class GRPCConfig::_Internal {
 public:
};

GRPCConfig::GRPCConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow_grpc.GRPCConfig)
}
GRPCConfig::GRPCConfig(const GRPCConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nb_queues_ = from.nb_queues_;
  // @@protoc_insertion_point(copy_constructor:flow_grpc.GRPCConfig)
}

inline void GRPCConfig::SharedCtor() {
nb_queues_ = 0;
}

GRPCConfig::~GRPCConfig() {
  // @@protoc_insertion_point(destructor:flow_grpc.GRPCConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GRPCConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GRPCConfig::ArenaDtor(void* object) {
  GRPCConfig* _this = reinterpret_cast< GRPCConfig* >(object);
  (void)_this;
}
void GRPCConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GRPCConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GRPCConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:flow_grpc.GRPCConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nb_queues_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GRPCConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 nb_queues = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          nb_queues_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GRPCConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow_grpc.GRPCConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nb_queues = 1;
  if (this->_internal_nb_queues() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_nb_queues(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow_grpc.GRPCConfig)
  return target;
}

size_t GRPCConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow_grpc.GRPCConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 nb_queues = 1;
  if (this->_internal_nb_queues() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nb_queues());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GRPCConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GRPCConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GRPCConfig::GetClassData() const { return &_class_data_; }

void GRPCConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GRPCConfig *>(to)->MergeFrom(
      static_cast<const GRPCConfig &>(from));
}


void GRPCConfig::MergeFrom(const GRPCConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow_grpc.GRPCConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_nb_queues() != 0) {
    _internal_set_nb_queues(from._internal_nb_queues());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GRPCConfig::CopyFrom(const GRPCConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow_grpc.GRPCConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GRPCConfig::IsInitialized() const {
  return true;
}

void GRPCConfig::InternalSwap(GRPCConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(nb_queues_, other->nb_queues_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GRPCConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_5fgrpc_2eproto_getter, &descriptor_table_flow_5fgrpc_2eproto_once,
      file_level_metadata_flow_5fgrpc_2eproto[4]);
}

// ===================================================================

class FlowPortConfig::_Internal {
 public:
};

FlowPortConfig::FlowPortConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow_grpc.FlowPortConfig)
}
FlowPortConfig::FlowPortConfig(const FlowPortConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&port_id_, &from.port_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_type_) -
    reinterpret_cast<char*>(&port_id_)) + sizeof(port_type_));
  // @@protoc_insertion_point(copy_constructor:flow_grpc.FlowPortConfig)
}

inline void FlowPortConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&port_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_type_) -
    reinterpret_cast<char*>(&port_id_)) + sizeof(port_type_));
}

FlowPortConfig::~FlowPortConfig() {
  // @@protoc_insertion_point(destructor:flow_grpc.FlowPortConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FlowPortConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FlowPortConfig::ArenaDtor(void* object) {
  FlowPortConfig* _this = reinterpret_cast< FlowPortConfig* >(object);
  (void)_this;
}
void FlowPortConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowPortConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlowPortConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:flow_grpc.FlowPortConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&port_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_type_) -
      reinterpret_cast<char*>(&port_id_)) + sizeof(port_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowPortConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 port_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          port_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 port_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          port_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlowPortConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow_grpc.FlowPortConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port_id = 1;
  if (this->_internal_port_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_port_id(), target);
  }

  // int32 port_type = 2;
  if (this->_internal_port_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow_grpc.FlowPortConfig)
  return target;
}

size_t FlowPortConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow_grpc.FlowPortConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 port_id = 1;
  if (this->_internal_port_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port_id());
  }

  // int32 port_type = 2;
  if (this->_internal_port_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_port_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlowPortConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FlowPortConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlowPortConfig::GetClassData() const { return &_class_data_; }

void FlowPortConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FlowPortConfig *>(to)->MergeFrom(
      static_cast<const FlowPortConfig &>(from));
}


void FlowPortConfig::MergeFrom(const FlowPortConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow_grpc.FlowPortConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port_id() != 0) {
    _internal_set_port_id(from._internal_port_id());
  }
  if (from._internal_port_type() != 0) {
    _internal_set_port_type(from._internal_port_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlowPortConfig::CopyFrom(const FlowPortConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow_grpc.FlowPortConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowPortConfig::IsInitialized() const {
  return true;
}

void FlowPortConfig::InternalSwap(FlowPortConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlowPortConfig, port_type_)
      + sizeof(FlowPortConfig::port_type_)
      - PROTOBUF_FIELD_OFFSET(FlowPortConfig, port_id_)>(
          reinterpret_cast<char*>(&port_id_),
          reinterpret_cast<char*>(&other->port_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowPortConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_5fgrpc_2eproto_getter, &descriptor_table_flow_5fgrpc_2eproto_once,
      file_level_metadata_flow_5fgrpc_2eproto[5]);
}

// ===================================================================

class PortPairRequest::_Internal {
 public:
};

PortPairRequest::PortPairRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow_grpc.PortPairRequest)
}
PortPairRequest::PortPairRequest(const PortPairRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&port_id1_, &from.port_id1_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_id2_) -
    reinterpret_cast<char*>(&port_id1_)) + sizeof(port_id2_));
  // @@protoc_insertion_point(copy_constructor:flow_grpc.PortPairRequest)
}

inline void PortPairRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&port_id1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_id2_) -
    reinterpret_cast<char*>(&port_id1_)) + sizeof(port_id2_));
}

PortPairRequest::~PortPairRequest() {
  // @@protoc_insertion_point(destructor:flow_grpc.PortPairRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PortPairRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PortPairRequest::ArenaDtor(void* object) {
  PortPairRequest* _this = reinterpret_cast< PortPairRequest* >(object);
  (void)_this;
}
void PortPairRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortPairRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PortPairRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow_grpc.PortPairRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&port_id1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_id2_) -
      reinterpret_cast<char*>(&port_id1_)) + sizeof(port_id2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortPairRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 port_id1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          port_id1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 port_id2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          port_id2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PortPairRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow_grpc.PortPairRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port_id1 = 1;
  if (this->_internal_port_id1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_port_id1(), target);
  }

  // uint32 port_id2 = 2;
  if (this->_internal_port_id2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port_id2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow_grpc.PortPairRequest)
  return target;
}

size_t PortPairRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow_grpc.PortPairRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 port_id1 = 1;
  if (this->_internal_port_id1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port_id1());
  }

  // uint32 port_id2 = 2;
  if (this->_internal_port_id2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port_id2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortPairRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PortPairRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortPairRequest::GetClassData() const { return &_class_data_; }

void PortPairRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PortPairRequest *>(to)->MergeFrom(
      static_cast<const PortPairRequest &>(from));
}


void PortPairRequest::MergeFrom(const PortPairRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow_grpc.PortPairRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port_id1() != 0) {
    _internal_set_port_id1(from._internal_port_id1());
  }
  if (from._internal_port_id2() != 0) {
    _internal_set_port_id2(from._internal_port_id2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortPairRequest::CopyFrom(const PortPairRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow_grpc.PortPairRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortPairRequest::IsInitialized() const {
  return true;
}

void PortPairRequest::InternalSwap(PortPairRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortPairRequest, port_id2_)
      + sizeof(PortPairRequest::port_id2_)
      - PROTOBUF_FIELD_OFFSET(PortPairRequest, port_id1_)>(
          reinterpret_cast<char*>(&port_id1_),
          reinterpret_cast<char*>(&other->port_id1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PortPairRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_5fgrpc_2eproto_getter, &descriptor_table_flow_5fgrpc_2eproto_once,
      file_level_metadata_flow_5fgrpc_2eproto[6]);
}

// ===================================================================

class PipeConfig::_Internal {
 public:
  static const ::flow_grpc::Match& match(const PipeConfig* msg);
  static const ::flow_grpc::Action& action(const PipeConfig* msg);
};

const ::flow_grpc::Match&
PipeConfig::_Internal::match(const PipeConfig* msg) {
  return *msg->match_;
}
const ::flow_grpc::Action&
PipeConfig::_Internal::action(const PipeConfig* msg) {
  return *msg->action_;
}
PipeConfig::PipeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow_grpc.PipeConfig)
}
PipeConfig::PipeConfig(const PipeConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_match()) {
    match_ = new ::flow_grpc::Match(*from.match_);
  } else {
    match_ = nullptr;
  }
  if (from._internal_has_action()) {
    action_ = new ::flow_grpc::Action(*from.action_);
  } else {
    action_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&nb_flows_) -
    reinterpret_cast<char*>(&type_)) + sizeof(nb_flows_));
  // @@protoc_insertion_point(copy_constructor:flow_grpc.PipeConfig)
}

inline void PipeConfig::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nb_flows_) -
    reinterpret_cast<char*>(&match_)) + sizeof(nb_flows_));
}

PipeConfig::~PipeConfig() {
  // @@protoc_insertion_point(destructor:flow_grpc.PipeConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PipeConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete match_;
  if (this != internal_default_instance()) delete action_;
}

void PipeConfig::ArenaDtor(void* object) {
  PipeConfig* _this = reinterpret_cast< PipeConfig* >(object);
  (void)_this;
}
void PipeConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PipeConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PipeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:flow_grpc.PipeConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && match_ != nullptr) {
    delete match_;
  }
  match_ = nullptr;
  if (GetArenaForAllocation() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nb_flows_) -
      reinterpret_cast<char*>(&type_)) + sizeof(nb_flows_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PipeConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flow_grpc.PipeConfig.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 port_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          port_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_root = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          is_root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .flow_grpc.Match match = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_match(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .flow_grpc.Action action = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nb_flows = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          nb_flows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PipeConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow_grpc.PipeConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flow_grpc.PipeConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 port_id = 3;
  if (this->_internal_port_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port_id(), target);
  }

  // bool is_root = 4;
  if (this->_internal_is_root() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_root(), target);
  }

  // .flow_grpc.Match match = 5;
  if (this->_internal_has_match()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::match(this), target, stream);
  }

  // .flow_grpc.Action action = 6;
  if (this->_internal_has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::action(this), target, stream);
  }

  // uint32 nb_flows = 7;
  if (this->_internal_nb_flows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_nb_flows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow_grpc.PipeConfig)
  return target;
}

size_t PipeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow_grpc.PipeConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .flow_grpc.Match match = 5;
  if (this->_internal_has_match()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *match_);
  }

  // .flow_grpc.Action action = 6;
  if (this->_internal_has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // uint32 port_id = 3;
  if (this->_internal_port_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port_id());
  }

  // bool is_root = 4;
  if (this->_internal_is_root() != 0) {
    total_size += 1 + 1;
  }

  // uint32 nb_flows = 7;
  if (this->_internal_nb_flows() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_nb_flows());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PipeConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PipeConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PipeConfig::GetClassData() const { return &_class_data_; }

void PipeConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PipeConfig *>(to)->MergeFrom(
      static_cast<const PipeConfig &>(from));
}


void PipeConfig::MergeFrom(const PipeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow_grpc.PipeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_match()) {
    _internal_mutable_match()->::flow_grpc::Match::MergeFrom(from._internal_match());
  }
  if (from._internal_has_action()) {
    _internal_mutable_action()->::flow_grpc::Action::MergeFrom(from._internal_action());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_port_id() != 0) {
    _internal_set_port_id(from._internal_port_id());
  }
  if (from._internal_is_root() != 0) {
    _internal_set_is_root(from._internal_is_root());
  }
  if (from._internal_nb_flows() != 0) {
    _internal_set_nb_flows(from._internal_nb_flows());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PipeConfig::CopyFrom(const PipeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow_grpc.PipeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PipeConfig::IsInitialized() const {
  return true;
}

void PipeConfig::InternalSwap(PipeConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PipeConfig, nb_flows_)
      + sizeof(PipeConfig::nb_flows_)
      - PROTOBUF_FIELD_OFFSET(PipeConfig, match_)>(
          reinterpret_cast<char*>(&match_),
          reinterpret_cast<char*>(&other->match_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PipeConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_5fgrpc_2eproto_getter, &descriptor_table_flow_5fgrpc_2eproto_once,
      file_level_metadata_flow_5fgrpc_2eproto[7]);
}

// ===================================================================

class Match::_Internal {
 public:
};

Match::Match(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow_grpc.Match)
}
Match::Match(const Match& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  match_rule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    match_rule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_match_rule().empty()) {
    match_rule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_match_rule(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow_grpc.Match)
}

inline void Match::SharedCtor() {
match_rule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  match_rule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Match::~Match() {
  // @@protoc_insertion_point(destructor:flow_grpc.Match)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Match::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  match_rule_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Match::ArenaDtor(void* object) {
  Match* _this = reinterpret_cast< Match* >(object);
  (void)_this;
}
void Match::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Match::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Match::Clear() {
// @@protoc_insertion_point(message_clear_start:flow_grpc.Match)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_rule_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Match::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string match_rule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_match_rule();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flow_grpc.Match.match_rule"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Match::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow_grpc.Match)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string match_rule = 1;
  if (!this->_internal_match_rule().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_match_rule().data(), static_cast<int>(this->_internal_match_rule().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flow_grpc.Match.match_rule");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_match_rule(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow_grpc.Match)
  return target;
}

size_t Match::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow_grpc.Match)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string match_rule = 1;
  if (!this->_internal_match_rule().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_match_rule());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Match::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Match::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Match::GetClassData() const { return &_class_data_; }

void Match::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Match *>(to)->MergeFrom(
      static_cast<const Match &>(from));
}


void Match::MergeFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow_grpc.Match)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_match_rule().empty()) {
    _internal_set_match_rule(from._internal_match_rule());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Match::CopyFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow_grpc.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match::IsInitialized() const {
  return true;
}

void Match::InternalSwap(Match* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &match_rule_, lhs_arena,
      &other->match_rule_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Match::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_5fgrpc_2eproto_getter, &descriptor_table_flow_5fgrpc_2eproto_once,
      file_level_metadata_flow_5fgrpc_2eproto[8]);
}

// ===================================================================

class Action::_Internal {
 public:
};

Action::Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow_grpc.Action)
}
Action::Action(const Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_rule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_rule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action_rule().empty()) {
    action_rule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action_rule(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow_grpc.Action)
}

inline void Action::SharedCtor() {
action_rule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_rule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:flow_grpc.Action)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Action::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_rule_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Action::ArenaDtor(void* object) {
  Action* _this = reinterpret_cast< Action* >(object);
  (void)_this;
}
void Action::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:flow_grpc.Action)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_rule_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string action_rule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_action_rule();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flow_grpc.Action.action_rule"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Action::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow_grpc.Action)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string action_rule = 1;
  if (!this->_internal_action_rule().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action_rule().data(), static_cast<int>(this->_internal_action_rule().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flow_grpc.Action.action_rule");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_action_rule(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow_grpc.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow_grpc.Action)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action_rule = 1;
  if (!this->_internal_action_rule().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_rule());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Action::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Action::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Action::GetClassData() const { return &_class_data_; }

void Action::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Action *>(to)->MergeFrom(
      static_cast<const Action &>(from));
}


void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow_grpc.Action)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_action_rule().empty()) {
    _internal_set_action_rule(from._internal_action_rule());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow_grpc.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::InternalSwap(Action* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_rule_, lhs_arena,
      &other->action_rule_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Action::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_5fgrpc_2eproto_getter, &descriptor_table_flow_5fgrpc_2eproto_once,
      file_level_metadata_flow_5fgrpc_2eproto[9]);
}

// ===================================================================

class FWD::_Internal {
 public:
};

FWD::FWD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow_grpc.FWD)
}
FWD::FWD(const FWD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fwd_rule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fwd_rule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fwd_rule().empty()) {
    fwd_rule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fwd_rule(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flow_grpc.FWD)
}

inline void FWD::SharedCtor() {
fwd_rule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fwd_rule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FWD::~FWD() {
  // @@protoc_insertion_point(destructor:flow_grpc.FWD)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FWD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  fwd_rule_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FWD::ArenaDtor(void* object) {
  FWD* _this = reinterpret_cast< FWD* >(object);
  (void)_this;
}
void FWD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FWD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FWD::Clear() {
// @@protoc_insertion_point(message_clear_start:flow_grpc.FWD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fwd_rule_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FWD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string fwd_rule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fwd_rule();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flow_grpc.FWD.fwd_rule"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FWD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow_grpc.FWD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string fwd_rule = 1;
  if (!this->_internal_fwd_rule().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fwd_rule().data(), static_cast<int>(this->_internal_fwd_rule().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flow_grpc.FWD.fwd_rule");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fwd_rule(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow_grpc.FWD)
  return target;
}

size_t FWD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow_grpc.FWD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fwd_rule = 1;
  if (!this->_internal_fwd_rule().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fwd_rule());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FWD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FWD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FWD::GetClassData() const { return &_class_data_; }

void FWD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FWD *>(to)->MergeFrom(
      static_cast<const FWD &>(from));
}


void FWD::MergeFrom(const FWD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow_grpc.FWD)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fwd_rule().empty()) {
    _internal_set_fwd_rule(from._internal_fwd_rule());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FWD::CopyFrom(const FWD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow_grpc.FWD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FWD::IsInitialized() const {
  return true;
}

void FWD::InternalSwap(FWD* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fwd_rule_, lhs_arena,
      &other->fwd_rule_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FWD::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_5fgrpc_2eproto_getter, &descriptor_table_flow_5fgrpc_2eproto_once,
      file_level_metadata_flow_5fgrpc_2eproto[10]);
}

// ===================================================================

class CreatePipeRequest::_Internal {
 public:
  static const ::flow_grpc::PipeConfig& pipe_config(const CreatePipeRequest* msg);
  static const ::flow_grpc::FWD& fwd(const CreatePipeRequest* msg);
  static const ::flow_grpc::FWD& fwd_miss(const CreatePipeRequest* msg);
};

const ::flow_grpc::PipeConfig&
CreatePipeRequest::_Internal::pipe_config(const CreatePipeRequest* msg) {
  return *msg->pipe_config_;
}
const ::flow_grpc::FWD&
CreatePipeRequest::_Internal::fwd(const CreatePipeRequest* msg) {
  return *msg->fwd_;
}
const ::flow_grpc::FWD&
CreatePipeRequest::_Internal::fwd_miss(const CreatePipeRequest* msg) {
  return *msg->fwd_miss_;
}
CreatePipeRequest::CreatePipeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow_grpc.CreatePipeRequest)
}
CreatePipeRequest::CreatePipeRequest(const CreatePipeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pipe_config()) {
    pipe_config_ = new ::flow_grpc::PipeConfig(*from.pipe_config_);
  } else {
    pipe_config_ = nullptr;
  }
  if (from._internal_has_fwd()) {
    fwd_ = new ::flow_grpc::FWD(*from.fwd_);
  } else {
    fwd_ = nullptr;
  }
  if (from._internal_has_fwd_miss()) {
    fwd_miss_ = new ::flow_grpc::FWD(*from.fwd_miss_);
  } else {
    fwd_miss_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flow_grpc.CreatePipeRequest)
}

inline void CreatePipeRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pipe_config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fwd_miss_) -
    reinterpret_cast<char*>(&pipe_config_)) + sizeof(fwd_miss_));
}

CreatePipeRequest::~CreatePipeRequest() {
  // @@protoc_insertion_point(destructor:flow_grpc.CreatePipeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreatePipeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pipe_config_;
  if (this != internal_default_instance()) delete fwd_;
  if (this != internal_default_instance()) delete fwd_miss_;
}

void CreatePipeRequest::ArenaDtor(void* object) {
  CreatePipeRequest* _this = reinterpret_cast< CreatePipeRequest* >(object);
  (void)_this;
}
void CreatePipeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreatePipeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreatePipeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow_grpc.CreatePipeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pipe_config_ != nullptr) {
    delete pipe_config_;
  }
  pipe_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fwd_ != nullptr) {
    delete fwd_;
  }
  fwd_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fwd_miss_ != nullptr) {
    delete fwd_miss_;
  }
  fwd_miss_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreatePipeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .flow_grpc.PipeConfig pipe_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pipe_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .flow_grpc.FWD fwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fwd(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .flow_grpc.FWD fwd_miss = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fwd_miss(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreatePipeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow_grpc.CreatePipeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .flow_grpc.PipeConfig pipe_config = 1;
  if (this->_internal_has_pipe_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pipe_config(this), target, stream);
  }

  // .flow_grpc.FWD fwd = 2;
  if (this->_internal_has_fwd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fwd(this), target, stream);
  }

  // .flow_grpc.FWD fwd_miss = 3;
  if (this->_internal_has_fwd_miss()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::fwd_miss(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow_grpc.CreatePipeRequest)
  return target;
}

size_t CreatePipeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow_grpc.CreatePipeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flow_grpc.PipeConfig pipe_config = 1;
  if (this->_internal_has_pipe_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pipe_config_);
  }

  // .flow_grpc.FWD fwd = 2;
  if (this->_internal_has_fwd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fwd_);
  }

  // .flow_grpc.FWD fwd_miss = 3;
  if (this->_internal_has_fwd_miss()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fwd_miss_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreatePipeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreatePipeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreatePipeRequest::GetClassData() const { return &_class_data_; }

void CreatePipeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreatePipeRequest *>(to)->MergeFrom(
      static_cast<const CreatePipeRequest &>(from));
}


void CreatePipeRequest::MergeFrom(const CreatePipeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow_grpc.CreatePipeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pipe_config()) {
    _internal_mutable_pipe_config()->::flow_grpc::PipeConfig::MergeFrom(from._internal_pipe_config());
  }
  if (from._internal_has_fwd()) {
    _internal_mutable_fwd()->::flow_grpc::FWD::MergeFrom(from._internal_fwd());
  }
  if (from._internal_has_fwd_miss()) {
    _internal_mutable_fwd_miss()->::flow_grpc::FWD::MergeFrom(from._internal_fwd_miss());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreatePipeRequest::CopyFrom(const CreatePipeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow_grpc.CreatePipeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePipeRequest::IsInitialized() const {
  return true;
}

void CreatePipeRequest::InternalSwap(CreatePipeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreatePipeRequest, fwd_miss_)
      + sizeof(CreatePipeRequest::fwd_miss_)
      - PROTOBUF_FIELD_OFFSET(CreatePipeRequest, pipe_config_)>(
          reinterpret_cast<char*>(&pipe_config_),
          reinterpret_cast<char*>(&other->pipe_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePipeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_5fgrpc_2eproto_getter, &descriptor_table_flow_5fgrpc_2eproto_once,
      file_level_metadata_flow_5fgrpc_2eproto[11]);
}

// ===================================================================

class AddEntryRequest::_Internal {
 public:
  static const ::flow_grpc::Match& match(const AddEntryRequest* msg);
  static const ::flow_grpc::Action& action(const AddEntryRequest* msg);
  static const ::flow_grpc::FWD& fwd(const AddEntryRequest* msg);
};

const ::flow_grpc::Match&
AddEntryRequest::_Internal::match(const AddEntryRequest* msg) {
  return *msg->match_;
}
const ::flow_grpc::Action&
AddEntryRequest::_Internal::action(const AddEntryRequest* msg) {
  return *msg->action_;
}
const ::flow_grpc::FWD&
AddEntryRequest::_Internal::fwd(const AddEntryRequest* msg) {
  return *msg->fwd_;
}
AddEntryRequest::AddEntryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow_grpc.AddEntryRequest)
}
AddEntryRequest::AddEntryRequest(const AddEntryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_match()) {
    match_ = new ::flow_grpc::Match(*from.match_);
  } else {
    match_ = nullptr;
  }
  if (from._internal_has_action()) {
    action_ = new ::flow_grpc::Action(*from.action_);
  } else {
    action_ = nullptr;
  }
  if (from._internal_has_fwd()) {
    fwd_ = new ::flow_grpc::FWD(*from.fwd_);
  } else {
    fwd_ = nullptr;
  }
  ::memcpy(&pipe_id_, &from.pipe_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&pipe_id_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:flow_grpc.AddEntryRequest)
}

inline void AddEntryRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&match_)) + sizeof(flags_));
}

AddEntryRequest::~AddEntryRequest() {
  // @@protoc_insertion_point(destructor:flow_grpc.AddEntryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddEntryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete match_;
  if (this != internal_default_instance()) delete action_;
  if (this != internal_default_instance()) delete fwd_;
}

void AddEntryRequest::ArenaDtor(void* object) {
  AddEntryRequest* _this = reinterpret_cast< AddEntryRequest* >(object);
  (void)_this;
}
void AddEntryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddEntryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddEntryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow_grpc.AddEntryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && match_ != nullptr) {
    delete match_;
  }
  match_ = nullptr;
  if (GetArenaForAllocation() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fwd_ != nullptr) {
    delete fwd_;
  }
  fwd_ = nullptr;
  ::memset(&pipe_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&pipe_id_)) + sizeof(flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddEntryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pipe_queue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pipe_queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pipe_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          pipe_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .flow_grpc.Match match = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_match(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .flow_grpc.Action action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .flow_grpc.FWD fwd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fwd(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddEntryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow_grpc.AddEntryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pipe_queue = 1;
  if (this->_internal_pipe_queue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pipe_queue(), target);
  }

  // uint64 pipe_id = 2;
  if (this->_internal_pipe_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pipe_id(), target);
  }

  // .flow_grpc.Match match = 3;
  if (this->_internal_has_match()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::match(this), target, stream);
  }

  // .flow_grpc.Action action = 4;
  if (this->_internal_has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::action(this), target, stream);
  }

  // .flow_grpc.FWD fwd = 5;
  if (this->_internal_has_fwd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::fwd(this), target, stream);
  }

  // uint32 flags = 6;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow_grpc.AddEntryRequest)
  return target;
}

size_t AddEntryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow_grpc.AddEntryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flow_grpc.Match match = 3;
  if (this->_internal_has_match()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *match_);
  }

  // .flow_grpc.Action action = 4;
  if (this->_internal_has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  // .flow_grpc.FWD fwd = 5;
  if (this->_internal_has_fwd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fwd_);
  }

  // uint64 pipe_id = 2;
  if (this->_internal_pipe_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_pipe_id());
  }

  // uint32 pipe_queue = 1;
  if (this->_internal_pipe_queue() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pipe_queue());
  }

  // uint32 flags = 6;
  if (this->_internal_flags() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddEntryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddEntryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddEntryRequest::GetClassData() const { return &_class_data_; }

void AddEntryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddEntryRequest *>(to)->MergeFrom(
      static_cast<const AddEntryRequest &>(from));
}


void AddEntryRequest::MergeFrom(const AddEntryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow_grpc.AddEntryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_match()) {
    _internal_mutable_match()->::flow_grpc::Match::MergeFrom(from._internal_match());
  }
  if (from._internal_has_action()) {
    _internal_mutable_action()->::flow_grpc::Action::MergeFrom(from._internal_action());
  }
  if (from._internal_has_fwd()) {
    _internal_mutable_fwd()->::flow_grpc::FWD::MergeFrom(from._internal_fwd());
  }
  if (from._internal_pipe_id() != 0) {
    _internal_set_pipe_id(from._internal_pipe_id());
  }
  if (from._internal_pipe_queue() != 0) {
    _internal_set_pipe_queue(from._internal_pipe_queue());
  }
  if (from._internal_flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddEntryRequest::CopyFrom(const AddEntryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow_grpc.AddEntryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddEntryRequest::IsInitialized() const {
  return true;
}

void AddEntryRequest::InternalSwap(AddEntryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddEntryRequest, flags_)
      + sizeof(AddEntryRequest::flags_)
      - PROTOBUF_FIELD_OFFSET(AddEntryRequest, match_)>(
          reinterpret_cast<char*>(&match_),
          reinterpret_cast<char*>(&other->match_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddEntryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_5fgrpc_2eproto_getter, &descriptor_table_flow_5fgrpc_2eproto_once,
      file_level_metadata_flow_5fgrpc_2eproto[12]);
}

// ===================================================================

class PortDumpRequest::_Internal {
 public:
};

PortDumpRequest::PortDumpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow_grpc.PortDumpRequest)
}
PortDumpRequest::PortDumpRequest(const PortDumpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result(), 
      GetArenaForAllocation());
  }
  port_id_ = from.port_id_;
  // @@protoc_insertion_point(copy_constructor:flow_grpc.PortDumpRequest)
}

inline void PortDumpRequest::SharedCtor() {
result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
port_id_ = 0u;
}

PortDumpRequest::~PortDumpRequest() {
  // @@protoc_insertion_point(destructor:flow_grpc.PortDumpRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PortDumpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PortDumpRequest::ArenaDtor(void* object) {
  PortDumpRequest* _this = reinterpret_cast< PortDumpRequest* >(object);
  (void)_this;
}
void PortDumpRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortDumpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PortDumpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow_grpc.PortDumpRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmpty();
  port_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortDumpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 port_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          port_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flow_grpc.PortDumpRequest.result"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PortDumpRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow_grpc.PortDumpRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port_id = 1;
  if (this->_internal_port_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_port_id(), target);
  }

  // string result = 2;
  if (!this->_internal_result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flow_grpc.PortDumpRequest.result");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow_grpc.PortDumpRequest)
  return target;
}

size_t PortDumpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow_grpc.PortDumpRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result = 2;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  // uint32 port_id = 1;
  if (this->_internal_port_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortDumpRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PortDumpRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortDumpRequest::GetClassData() const { return &_class_data_; }

void PortDumpRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PortDumpRequest *>(to)->MergeFrom(
      static_cast<const PortDumpRequest &>(from));
}


void PortDumpRequest::MergeFrom(const PortDumpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow_grpc.PortDumpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result().empty()) {
    _internal_set_result(from._internal_result());
  }
  if (from._internal_port_id() != 0) {
    _internal_set_port_id(from._internal_port_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortDumpRequest::CopyFrom(const PortDumpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow_grpc.PortDumpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortDumpRequest::IsInitialized() const {
  return true;
}

void PortDumpRequest::InternalSwap(PortDumpRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &result_, lhs_arena,
      &other->result_, rhs_arena
  );
  swap(port_id_, other->port_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PortDumpRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_5fgrpc_2eproto_getter, &descriptor_table_flow_5fgrpc_2eproto_once,
      file_level_metadata_flow_5fgrpc_2eproto[13]);
}

// ===================================================================

class QueryRequest::_Internal {
 public:
};

QueryRequest::QueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow_grpc.QueryRequest)
}
QueryRequest::QueryRequest(const QueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&entry_id_, &from.entry_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_pkts_) -
    reinterpret_cast<char*>(&entry_id_)) + sizeof(total_pkts_));
  // @@protoc_insertion_point(copy_constructor:flow_grpc.QueryRequest)
}

inline void QueryRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entry_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_pkts_) -
    reinterpret_cast<char*>(&entry_id_)) + sizeof(total_pkts_));
}

QueryRequest::~QueryRequest() {
  // @@protoc_insertion_point(destructor:flow_grpc.QueryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryRequest::ArenaDtor(void* object) {
  QueryRequest* _this = reinterpret_cast< QueryRequest* >(object);
  (void)_this;
}
void QueryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow_grpc.QueryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&entry_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_pkts_) -
      reinterpret_cast<char*>(&entry_id_)) + sizeof(total_pkts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 entry_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          entry_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          total_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_pkts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          total_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow_grpc.QueryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 entry_id = 1;
  if (this->_internal_entry_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_entry_id(), target);
  }

  // uint64 total_bytes = 2;
  if (this->_internal_total_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total_bytes(), target);
  }

  // uint64 total_pkts = 3;
  if (this->_internal_total_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_total_pkts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow_grpc.QueryRequest)
  return target;
}

size_t QueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow_grpc.QueryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 entry_id = 1;
  if (this->_internal_entry_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_entry_id());
  }

  // uint64 total_bytes = 2;
  if (this->_internal_total_bytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_bytes());
  }

  // uint64 total_pkts = 3;
  if (this->_internal_total_pkts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_pkts());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryRequest::GetClassData() const { return &_class_data_; }

void QueryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryRequest *>(to)->MergeFrom(
      static_cast<const QueryRequest &>(from));
}


void QueryRequest::MergeFrom(const QueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow_grpc.QueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_entry_id() != 0) {
    _internal_set_entry_id(from._internal_entry_id());
  }
  if (from._internal_total_bytes() != 0) {
    _internal_set_total_bytes(from._internal_total_bytes());
  }
  if (from._internal_total_pkts() != 0) {
    _internal_set_total_pkts(from._internal_total_pkts());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryRequest::CopyFrom(const QueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow_grpc.QueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRequest::IsInitialized() const {
  return true;
}

void QueryRequest::InternalSwap(QueryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryRequest, total_pkts_)
      + sizeof(QueryRequest::total_pkts_)
      - PROTOBUF_FIELD_OFFSET(QueryRequest, entry_id_)>(
          reinterpret_cast<char*>(&entry_id_),
          reinterpret_cast<char*>(&other->entry_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_5fgrpc_2eproto_getter, &descriptor_table_flow_5fgrpc_2eproto_once,
      file_level_metadata_flow_5fgrpc_2eproto[14]);
}

// ===================================================================

class PortFlushRequest::_Internal {
 public:
};

PortFlushRequest::PortFlushRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow_grpc.PortFlushRequest)
}
PortFlushRequest::PortFlushRequest(const PortFlushRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  port_id_ = from.port_id_;
  // @@protoc_insertion_point(copy_constructor:flow_grpc.PortFlushRequest)
}

inline void PortFlushRequest::SharedCtor() {
port_id_ = 0u;
}

PortFlushRequest::~PortFlushRequest() {
  // @@protoc_insertion_point(destructor:flow_grpc.PortFlushRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PortFlushRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PortFlushRequest::ArenaDtor(void* object) {
  PortFlushRequest* _this = reinterpret_cast< PortFlushRequest* >(object);
  (void)_this;
}
void PortFlushRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortFlushRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PortFlushRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow_grpc.PortFlushRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  port_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortFlushRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 port_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          port_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PortFlushRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow_grpc.PortFlushRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port_id = 1;
  if (this->_internal_port_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_port_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow_grpc.PortFlushRequest)
  return target;
}

size_t PortFlushRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow_grpc.PortFlushRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 port_id = 1;
  if (this->_internal_port_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortFlushRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PortFlushRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortFlushRequest::GetClassData() const { return &_class_data_; }

void PortFlushRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PortFlushRequest *>(to)->MergeFrom(
      static_cast<const PortFlushRequest &>(from));
}


void PortFlushRequest::MergeFrom(const PortFlushRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow_grpc.PortFlushRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port_id() != 0) {
    _internal_set_port_id(from._internal_port_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortFlushRequest::CopyFrom(const PortFlushRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow_grpc.PortFlushRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortFlushRequest::IsInitialized() const {
  return true;
}

void PortFlushRequest::InternalSwap(PortFlushRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(port_id_, other->port_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PortFlushRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_5fgrpc_2eproto_getter, &descriptor_table_flow_5fgrpc_2eproto_once,
      file_level_metadata_flow_5fgrpc_2eproto[15]);
}

// ===================================================================

class RmEntryRequest::_Internal {
 public:
};

RmEntryRequest::RmEntryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow_grpc.RmEntryRequest)
}
RmEntryRequest::RmEntryRequest(const RmEntryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&entry_id_, &from.entry_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pipe_queue_) -
    reinterpret_cast<char*>(&entry_id_)) + sizeof(pipe_queue_));
  // @@protoc_insertion_point(copy_constructor:flow_grpc.RmEntryRequest)
}

inline void RmEntryRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entry_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pipe_queue_) -
    reinterpret_cast<char*>(&entry_id_)) + sizeof(pipe_queue_));
}

RmEntryRequest::~RmEntryRequest() {
  // @@protoc_insertion_point(destructor:flow_grpc.RmEntryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RmEntryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RmEntryRequest::ArenaDtor(void* object) {
  RmEntryRequest* _this = reinterpret_cast< RmEntryRequest* >(object);
  (void)_this;
}
void RmEntryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RmEntryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RmEntryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow_grpc.RmEntryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&entry_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pipe_queue_) -
      reinterpret_cast<char*>(&entry_id_)) + sizeof(pipe_queue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RmEntryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pipe_queue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pipe_queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 entry_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          entry_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RmEntryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow_grpc.RmEntryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pipe_queue = 1;
  if (this->_internal_pipe_queue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pipe_queue(), target);
  }

  // uint64 entry_id = 2;
  if (this->_internal_entry_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_entry_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow_grpc.RmEntryRequest)
  return target;
}

size_t RmEntryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow_grpc.RmEntryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 entry_id = 2;
  if (this->_internal_entry_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_entry_id());
  }

  // uint32 pipe_queue = 1;
  if (this->_internal_pipe_queue() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pipe_queue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RmEntryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RmEntryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RmEntryRequest::GetClassData() const { return &_class_data_; }

void RmEntryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RmEntryRequest *>(to)->MergeFrom(
      static_cast<const RmEntryRequest &>(from));
}


void RmEntryRequest::MergeFrom(const RmEntryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow_grpc.RmEntryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_entry_id() != 0) {
    _internal_set_entry_id(from._internal_entry_id());
  }
  if (from._internal_pipe_queue() != 0) {
    _internal_set_pipe_queue(from._internal_pipe_queue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RmEntryRequest::CopyFrom(const RmEntryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow_grpc.RmEntryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RmEntryRequest::IsInitialized() const {
  return true;
}

void RmEntryRequest::InternalSwap(RmEntryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RmEntryRequest, pipe_queue_)
      + sizeof(RmEntryRequest::pipe_queue_)
      - PROTOBUF_FIELD_OFFSET(RmEntryRequest, entry_id_)>(
          reinterpret_cast<char*>(&entry_id_),
          reinterpret_cast<char*>(&other->entry_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RmEntryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_5fgrpc_2eproto_getter, &descriptor_table_flow_5fgrpc_2eproto_once,
      file_level_metadata_flow_5fgrpc_2eproto[16]);
}

// ===================================================================

class DestroyPipeRequest::_Internal {
 public:
};

DestroyPipeRequest::DestroyPipeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow_grpc.DestroyPipeRequest)
}
DestroyPipeRequest::DestroyPipeRequest(const DestroyPipeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pipe_id_, &from.pipe_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_id_) -
    reinterpret_cast<char*>(&pipe_id_)) + sizeof(port_id_));
  // @@protoc_insertion_point(copy_constructor:flow_grpc.DestroyPipeRequest)
}

inline void DestroyPipeRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pipe_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_id_) -
    reinterpret_cast<char*>(&pipe_id_)) + sizeof(port_id_));
}

DestroyPipeRequest::~DestroyPipeRequest() {
  // @@protoc_insertion_point(destructor:flow_grpc.DestroyPipeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DestroyPipeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DestroyPipeRequest::ArenaDtor(void* object) {
  DestroyPipeRequest* _this = reinterpret_cast< DestroyPipeRequest* >(object);
  (void)_this;
}
void DestroyPipeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DestroyPipeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DestroyPipeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow_grpc.DestroyPipeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pipe_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_id_) -
      reinterpret_cast<char*>(&pipe_id_)) + sizeof(port_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DestroyPipeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 port_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          port_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pipe_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          pipe_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DestroyPipeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow_grpc.DestroyPipeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port_id = 1;
  if (this->_internal_port_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_port_id(), target);
  }

  // uint64 pipe_id = 2;
  if (this->_internal_pipe_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pipe_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow_grpc.DestroyPipeRequest)
  return target;
}

size_t DestroyPipeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow_grpc.DestroyPipeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 pipe_id = 2;
  if (this->_internal_pipe_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_pipe_id());
  }

  // uint32 port_id = 1;
  if (this->_internal_port_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DestroyPipeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DestroyPipeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DestroyPipeRequest::GetClassData() const { return &_class_data_; }

void DestroyPipeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DestroyPipeRequest *>(to)->MergeFrom(
      static_cast<const DestroyPipeRequest &>(from));
}


void DestroyPipeRequest::MergeFrom(const DestroyPipeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow_grpc.DestroyPipeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pipe_id() != 0) {
    _internal_set_pipe_id(from._internal_pipe_id());
  }
  if (from._internal_port_id() != 0) {
    _internal_set_port_id(from._internal_port_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DestroyPipeRequest::CopyFrom(const DestroyPipeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow_grpc.DestroyPipeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyPipeRequest::IsInitialized() const {
  return true;
}

void DestroyPipeRequest::InternalSwap(DestroyPipeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DestroyPipeRequest, port_id_)
      + sizeof(DestroyPipeRequest::port_id_)
      - PROTOBUF_FIELD_OFFSET(DestroyPipeRequest, pipe_id_)>(
          reinterpret_cast<char*>(&pipe_id_),
          reinterpret_cast<char*>(&other->pipe_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DestroyPipeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_5fgrpc_2eproto_getter, &descriptor_table_flow_5fgrpc_2eproto_once,
      file_level_metadata_flow_5fgrpc_2eproto[17]);
}

// ===================================================================

class EnvDestroyRequest::_Internal {
 public:
};

EnvDestroyRequest::EnvDestroyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flow_grpc.EnvDestroyRequest)
}
EnvDestroyRequest::EnvDestroyRequest(const EnvDestroyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flow_grpc.EnvDestroyRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnvDestroyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnvDestroyRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata EnvDestroyRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_5fgrpc_2eproto_getter, &descriptor_table_flow_5fgrpc_2eproto_once,
      file_level_metadata_flow_5fgrpc_2eproto[18]);
}

// ===================================================================

class DestroyPortRequest::_Internal {
 public:
};

DestroyPortRequest::DestroyPortRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flow_grpc.DestroyPortRequest)
}
DestroyPortRequest::DestroyPortRequest(const DestroyPortRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  port_id_ = from.port_id_;
  // @@protoc_insertion_point(copy_constructor:flow_grpc.DestroyPortRequest)
}

inline void DestroyPortRequest::SharedCtor() {
port_id_ = 0u;
}

DestroyPortRequest::~DestroyPortRequest() {
  // @@protoc_insertion_point(destructor:flow_grpc.DestroyPortRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DestroyPortRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DestroyPortRequest::ArenaDtor(void* object) {
  DestroyPortRequest* _this = reinterpret_cast< DestroyPortRequest* >(object);
  (void)_this;
}
void DestroyPortRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DestroyPortRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DestroyPortRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flow_grpc.DestroyPortRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  port_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DestroyPortRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 port_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          port_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DestroyPortRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flow_grpc.DestroyPortRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port_id = 1;
  if (this->_internal_port_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_port_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flow_grpc.DestroyPortRequest)
  return target;
}

size_t DestroyPortRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flow_grpc.DestroyPortRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 port_id = 1;
  if (this->_internal_port_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DestroyPortRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DestroyPortRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DestroyPortRequest::GetClassData() const { return &_class_data_; }

void DestroyPortRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DestroyPortRequest *>(to)->MergeFrom(
      static_cast<const DestroyPortRequest &>(from));
}


void DestroyPortRequest::MergeFrom(const DestroyPortRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flow_grpc.DestroyPortRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port_id() != 0) {
    _internal_set_port_id(from._internal_port_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DestroyPortRequest::CopyFrom(const DestroyPortRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flow_grpc.DestroyPortRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyPortRequest::IsInitialized() const {
  return true;
}

void DestroyPortRequest::InternalSwap(DestroyPortRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(port_id_, other->port_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DestroyPortRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flow_5fgrpc_2eproto_getter, &descriptor_table_flow_5fgrpc_2eproto_once,
      file_level_metadata_flow_5fgrpc_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace flow_grpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flow_grpc::Response* Arena::CreateMaybeMessage< ::flow_grpc::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow_grpc::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::flow_grpc::Error* Arena::CreateMaybeMessage< ::flow_grpc::Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow_grpc::Error >(arena);
}
template<> PROTOBUF_NOINLINE ::flow_grpc::DPDKConfig* Arena::CreateMaybeMessage< ::flow_grpc::DPDKConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow_grpc::DPDKConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::flow_grpc::APPPortConfig* Arena::CreateMaybeMessage< ::flow_grpc::APPPortConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow_grpc::APPPortConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::flow_grpc::GRPCConfig* Arena::CreateMaybeMessage< ::flow_grpc::GRPCConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow_grpc::GRPCConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::flow_grpc::FlowPortConfig* Arena::CreateMaybeMessage< ::flow_grpc::FlowPortConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow_grpc::FlowPortConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::flow_grpc::PortPairRequest* Arena::CreateMaybeMessage< ::flow_grpc::PortPairRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow_grpc::PortPairRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow_grpc::PipeConfig* Arena::CreateMaybeMessage< ::flow_grpc::PipeConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow_grpc::PipeConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::flow_grpc::Match* Arena::CreateMaybeMessage< ::flow_grpc::Match >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow_grpc::Match >(arena);
}
template<> PROTOBUF_NOINLINE ::flow_grpc::Action* Arena::CreateMaybeMessage< ::flow_grpc::Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow_grpc::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::flow_grpc::FWD* Arena::CreateMaybeMessage< ::flow_grpc::FWD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow_grpc::FWD >(arena);
}
template<> PROTOBUF_NOINLINE ::flow_grpc::CreatePipeRequest* Arena::CreateMaybeMessage< ::flow_grpc::CreatePipeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow_grpc::CreatePipeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow_grpc::AddEntryRequest* Arena::CreateMaybeMessage< ::flow_grpc::AddEntryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow_grpc::AddEntryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow_grpc::PortDumpRequest* Arena::CreateMaybeMessage< ::flow_grpc::PortDumpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow_grpc::PortDumpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow_grpc::QueryRequest* Arena::CreateMaybeMessage< ::flow_grpc::QueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow_grpc::QueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow_grpc::PortFlushRequest* Arena::CreateMaybeMessage< ::flow_grpc::PortFlushRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow_grpc::PortFlushRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow_grpc::RmEntryRequest* Arena::CreateMaybeMessage< ::flow_grpc::RmEntryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow_grpc::RmEntryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow_grpc::DestroyPipeRequest* Arena::CreateMaybeMessage< ::flow_grpc::DestroyPipeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow_grpc::DestroyPipeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow_grpc::EnvDestroyRequest* Arena::CreateMaybeMessage< ::flow_grpc::EnvDestroyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow_grpc::EnvDestroyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flow_grpc::DestroyPortRequest* Arena::CreateMaybeMessage< ::flow_grpc::DestroyPortRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flow_grpc::DestroyPortRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

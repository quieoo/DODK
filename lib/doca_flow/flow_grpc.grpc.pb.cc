// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flow_grpc.proto

#include "flow_grpc.pb.h"
#include "flow_grpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace flow_grpc {

static const char* FlowGRPC_method_names[] = {
  "/flow_grpc.FlowGRPC/EnvInitialize",
  "/flow_grpc.FlowGRPC/GRPCInitialize",
  "/flow_grpc.FlowGRPC/PortStart",
  "/flow_grpc.FlowGRPC/PortPair",
  "/flow_grpc.FlowGRPC/CreatePipe",
  "/flow_grpc.FlowGRPC/AddEntry",
  "/flow_grpc.FlowGRPC/PortPipesDump",
  "/flow_grpc.FlowGRPC/Query",
  "/flow_grpc.FlowGRPC/FlushPort",
  "/flow_grpc.FlowGRPC/RmEntry",
  "/flow_grpc.FlowGRPC/DestroyPipe",
  "/flow_grpc.FlowGRPC/EnvDestroy",
  "/flow_grpc.FlowGRPC/DestroyPort",
};

std::unique_ptr< FlowGRPC::Stub> FlowGRPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FlowGRPC::Stub> stub(new FlowGRPC::Stub(channel, options));
  return stub;
}

FlowGRPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_EnvInitialize_(FlowGRPC_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GRPCInitialize_(FlowGRPC_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PortStart_(FlowGRPC_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PortPair_(FlowGRPC_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreatePipe_(FlowGRPC_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddEntry_(FlowGRPC_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PortPipesDump_(FlowGRPC_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Query_(FlowGRPC_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FlushPort_(FlowGRPC_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RmEntry_(FlowGRPC_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyPipe_(FlowGRPC_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EnvDestroy_(FlowGRPC_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyPort_(FlowGRPC_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FlowGRPC::Stub::EnvInitialize(::grpc::ClientContext* context, const ::flow_grpc::DPDKConfig& request, ::flow_grpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow_grpc::DPDKConfig, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EnvInitialize_, context, request, response);
}

void FlowGRPC::Stub::async::EnvInitialize(::grpc::ClientContext* context, const ::flow_grpc::DPDKConfig* request, ::flow_grpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow_grpc::DPDKConfig, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnvInitialize_, context, request, response, std::move(f));
}

void FlowGRPC::Stub::async::EnvInitialize(::grpc::ClientContext* context, const ::flow_grpc::DPDKConfig* request, ::flow_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnvInitialize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::PrepareAsyncEnvInitializeRaw(::grpc::ClientContext* context, const ::flow_grpc::DPDKConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow_grpc::Response, ::flow_grpc::DPDKConfig, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EnvInitialize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::AsyncEnvInitializeRaw(::grpc::ClientContext* context, const ::flow_grpc::DPDKConfig& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEnvInitializeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FlowGRPC::Stub::GRPCInitialize(::grpc::ClientContext* context, const ::flow_grpc::GRPCConfig& request, ::flow_grpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow_grpc::GRPCConfig, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GRPCInitialize_, context, request, response);
}

void FlowGRPC::Stub::async::GRPCInitialize(::grpc::ClientContext* context, const ::flow_grpc::GRPCConfig* request, ::flow_grpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow_grpc::GRPCConfig, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GRPCInitialize_, context, request, response, std::move(f));
}

void FlowGRPC::Stub::async::GRPCInitialize(::grpc::ClientContext* context, const ::flow_grpc::GRPCConfig* request, ::flow_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GRPCInitialize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::PrepareAsyncGRPCInitializeRaw(::grpc::ClientContext* context, const ::flow_grpc::GRPCConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow_grpc::Response, ::flow_grpc::GRPCConfig, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GRPCInitialize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::AsyncGRPCInitializeRaw(::grpc::ClientContext* context, const ::flow_grpc::GRPCConfig& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGRPCInitializeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FlowGRPC::Stub::PortStart(::grpc::ClientContext* context, const ::flow_grpc::FlowPortConfig& request, ::flow_grpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow_grpc::FlowPortConfig, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PortStart_, context, request, response);
}

void FlowGRPC::Stub::async::PortStart(::grpc::ClientContext* context, const ::flow_grpc::FlowPortConfig* request, ::flow_grpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow_grpc::FlowPortConfig, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PortStart_, context, request, response, std::move(f));
}

void FlowGRPC::Stub::async::PortStart(::grpc::ClientContext* context, const ::flow_grpc::FlowPortConfig* request, ::flow_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PortStart_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::PrepareAsyncPortStartRaw(::grpc::ClientContext* context, const ::flow_grpc::FlowPortConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow_grpc::Response, ::flow_grpc::FlowPortConfig, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PortStart_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::AsyncPortStartRaw(::grpc::ClientContext* context, const ::flow_grpc::FlowPortConfig& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPortStartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FlowGRPC::Stub::PortPair(::grpc::ClientContext* context, const ::flow_grpc::PortPairRequest& request, ::flow_grpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow_grpc::PortPairRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PortPair_, context, request, response);
}

void FlowGRPC::Stub::async::PortPair(::grpc::ClientContext* context, const ::flow_grpc::PortPairRequest* request, ::flow_grpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow_grpc::PortPairRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PortPair_, context, request, response, std::move(f));
}

void FlowGRPC::Stub::async::PortPair(::grpc::ClientContext* context, const ::flow_grpc::PortPairRequest* request, ::flow_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PortPair_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::PrepareAsyncPortPairRaw(::grpc::ClientContext* context, const ::flow_grpc::PortPairRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow_grpc::Response, ::flow_grpc::PortPairRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PortPair_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::AsyncPortPairRaw(::grpc::ClientContext* context, const ::flow_grpc::PortPairRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPortPairRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FlowGRPC::Stub::CreatePipe(::grpc::ClientContext* context, const ::flow_grpc::CreatePipeRequest& request, ::flow_grpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow_grpc::CreatePipeRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreatePipe_, context, request, response);
}

void FlowGRPC::Stub::async::CreatePipe(::grpc::ClientContext* context, const ::flow_grpc::CreatePipeRequest* request, ::flow_grpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow_grpc::CreatePipeRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreatePipe_, context, request, response, std::move(f));
}

void FlowGRPC::Stub::async::CreatePipe(::grpc::ClientContext* context, const ::flow_grpc::CreatePipeRequest* request, ::flow_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreatePipe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::PrepareAsyncCreatePipeRaw(::grpc::ClientContext* context, const ::flow_grpc::CreatePipeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow_grpc::Response, ::flow_grpc::CreatePipeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreatePipe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::AsyncCreatePipeRaw(::grpc::ClientContext* context, const ::flow_grpc::CreatePipeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreatePipeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FlowGRPC::Stub::AddEntry(::grpc::ClientContext* context, const ::flow_grpc::AddEntryRequest& request, ::flow_grpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow_grpc::AddEntryRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddEntry_, context, request, response);
}

void FlowGRPC::Stub::async::AddEntry(::grpc::ClientContext* context, const ::flow_grpc::AddEntryRequest* request, ::flow_grpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow_grpc::AddEntryRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddEntry_, context, request, response, std::move(f));
}

void FlowGRPC::Stub::async::AddEntry(::grpc::ClientContext* context, const ::flow_grpc::AddEntryRequest* request, ::flow_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddEntry_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::PrepareAsyncAddEntryRaw(::grpc::ClientContext* context, const ::flow_grpc::AddEntryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow_grpc::Response, ::flow_grpc::AddEntryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddEntry_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::AsyncAddEntryRaw(::grpc::ClientContext* context, const ::flow_grpc::AddEntryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddEntryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FlowGRPC::Stub::PortPipesDump(::grpc::ClientContext* context, const ::flow_grpc::PortDumpRequest& request, ::flow_grpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow_grpc::PortDumpRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PortPipesDump_, context, request, response);
}

void FlowGRPC::Stub::async::PortPipesDump(::grpc::ClientContext* context, const ::flow_grpc::PortDumpRequest* request, ::flow_grpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow_grpc::PortDumpRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PortPipesDump_, context, request, response, std::move(f));
}

void FlowGRPC::Stub::async::PortPipesDump(::grpc::ClientContext* context, const ::flow_grpc::PortDumpRequest* request, ::flow_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PortPipesDump_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::PrepareAsyncPortPipesDumpRaw(::grpc::ClientContext* context, const ::flow_grpc::PortDumpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow_grpc::Response, ::flow_grpc::PortDumpRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PortPipesDump_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::AsyncPortPipesDumpRaw(::grpc::ClientContext* context, const ::flow_grpc::PortDumpRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPortPipesDumpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FlowGRPC::Stub::Query(::grpc::ClientContext* context, const ::flow_grpc::QueryRequest& request, ::flow_grpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow_grpc::QueryRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Query_, context, request, response);
}

void FlowGRPC::Stub::async::Query(::grpc::ClientContext* context, const ::flow_grpc::QueryRequest* request, ::flow_grpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow_grpc::QueryRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, std::move(f));
}

void FlowGRPC::Stub::async::Query(::grpc::ClientContext* context, const ::flow_grpc::QueryRequest* request, ::flow_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::flow_grpc::QueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow_grpc::Response, ::flow_grpc::QueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Query_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::AsyncQueryRaw(::grpc::ClientContext* context, const ::flow_grpc::QueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FlowGRPC::Stub::FlushPort(::grpc::ClientContext* context, const ::flow_grpc::PortFlushRequest& request, ::flow_grpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow_grpc::PortFlushRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FlushPort_, context, request, response);
}

void FlowGRPC::Stub::async::FlushPort(::grpc::ClientContext* context, const ::flow_grpc::PortFlushRequest* request, ::flow_grpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow_grpc::PortFlushRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FlushPort_, context, request, response, std::move(f));
}

void FlowGRPC::Stub::async::FlushPort(::grpc::ClientContext* context, const ::flow_grpc::PortFlushRequest* request, ::flow_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FlushPort_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::PrepareAsyncFlushPortRaw(::grpc::ClientContext* context, const ::flow_grpc::PortFlushRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow_grpc::Response, ::flow_grpc::PortFlushRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FlushPort_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::AsyncFlushPortRaw(::grpc::ClientContext* context, const ::flow_grpc::PortFlushRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFlushPortRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FlowGRPC::Stub::RmEntry(::grpc::ClientContext* context, const ::flow_grpc::RmEntryRequest& request, ::flow_grpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow_grpc::RmEntryRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RmEntry_, context, request, response);
}

void FlowGRPC::Stub::async::RmEntry(::grpc::ClientContext* context, const ::flow_grpc::RmEntryRequest* request, ::flow_grpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow_grpc::RmEntryRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RmEntry_, context, request, response, std::move(f));
}

void FlowGRPC::Stub::async::RmEntry(::grpc::ClientContext* context, const ::flow_grpc::RmEntryRequest* request, ::flow_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RmEntry_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::PrepareAsyncRmEntryRaw(::grpc::ClientContext* context, const ::flow_grpc::RmEntryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow_grpc::Response, ::flow_grpc::RmEntryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RmEntry_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::AsyncRmEntryRaw(::grpc::ClientContext* context, const ::flow_grpc::RmEntryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRmEntryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FlowGRPC::Stub::DestroyPipe(::grpc::ClientContext* context, const ::flow_grpc::DestroyPipeRequest& request, ::flow_grpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow_grpc::DestroyPipeRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DestroyPipe_, context, request, response);
}

void FlowGRPC::Stub::async::DestroyPipe(::grpc::ClientContext* context, const ::flow_grpc::DestroyPipeRequest* request, ::flow_grpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow_grpc::DestroyPipeRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyPipe_, context, request, response, std::move(f));
}

void FlowGRPC::Stub::async::DestroyPipe(::grpc::ClientContext* context, const ::flow_grpc::DestroyPipeRequest* request, ::flow_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyPipe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::PrepareAsyncDestroyPipeRaw(::grpc::ClientContext* context, const ::flow_grpc::DestroyPipeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow_grpc::Response, ::flow_grpc::DestroyPipeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DestroyPipe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::AsyncDestroyPipeRaw(::grpc::ClientContext* context, const ::flow_grpc::DestroyPipeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyPipeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FlowGRPC::Stub::EnvDestroy(::grpc::ClientContext* context, const ::flow_grpc::EnvDestroyRequest& request, ::flow_grpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow_grpc::EnvDestroyRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EnvDestroy_, context, request, response);
}

void FlowGRPC::Stub::async::EnvDestroy(::grpc::ClientContext* context, const ::flow_grpc::EnvDestroyRequest* request, ::flow_grpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow_grpc::EnvDestroyRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnvDestroy_, context, request, response, std::move(f));
}

void FlowGRPC::Stub::async::EnvDestroy(::grpc::ClientContext* context, const ::flow_grpc::EnvDestroyRequest* request, ::flow_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnvDestroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::PrepareAsyncEnvDestroyRaw(::grpc::ClientContext* context, const ::flow_grpc::EnvDestroyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow_grpc::Response, ::flow_grpc::EnvDestroyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EnvDestroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::AsyncEnvDestroyRaw(::grpc::ClientContext* context, const ::flow_grpc::EnvDestroyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEnvDestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FlowGRPC::Stub::DestroyPort(::grpc::ClientContext* context, const ::flow_grpc::DestroyPortRequest& request, ::flow_grpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flow_grpc::DestroyPortRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DestroyPort_, context, request, response);
}

void FlowGRPC::Stub::async::DestroyPort(::grpc::ClientContext* context, const ::flow_grpc::DestroyPortRequest* request, ::flow_grpc::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flow_grpc::DestroyPortRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyPort_, context, request, response, std::move(f));
}

void FlowGRPC::Stub::async::DestroyPort(::grpc::ClientContext* context, const ::flow_grpc::DestroyPortRequest* request, ::flow_grpc::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyPort_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::PrepareAsyncDestroyPortRaw(::grpc::ClientContext* context, const ::flow_grpc::DestroyPortRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flow_grpc::Response, ::flow_grpc::DestroyPortRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DestroyPort_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flow_grpc::Response>* FlowGRPC::Stub::AsyncDestroyPortRaw(::grpc::ClientContext* context, const ::flow_grpc::DestroyPortRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyPortRaw(context, request, cq);
  result->StartCall();
  return result;
}

FlowGRPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlowGRPC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlowGRPC::Service, ::flow_grpc::DPDKConfig, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FlowGRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow_grpc::DPDKConfig* req,
             ::flow_grpc::Response* resp) {
               return service->EnvInitialize(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlowGRPC_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlowGRPC::Service, ::flow_grpc::GRPCConfig, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FlowGRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow_grpc::GRPCConfig* req,
             ::flow_grpc::Response* resp) {
               return service->GRPCInitialize(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlowGRPC_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlowGRPC::Service, ::flow_grpc::FlowPortConfig, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FlowGRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow_grpc::FlowPortConfig* req,
             ::flow_grpc::Response* resp) {
               return service->PortStart(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlowGRPC_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlowGRPC::Service, ::flow_grpc::PortPairRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FlowGRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow_grpc::PortPairRequest* req,
             ::flow_grpc::Response* resp) {
               return service->PortPair(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlowGRPC_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlowGRPC::Service, ::flow_grpc::CreatePipeRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FlowGRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow_grpc::CreatePipeRequest* req,
             ::flow_grpc::Response* resp) {
               return service->CreatePipe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlowGRPC_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlowGRPC::Service, ::flow_grpc::AddEntryRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FlowGRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow_grpc::AddEntryRequest* req,
             ::flow_grpc::Response* resp) {
               return service->AddEntry(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlowGRPC_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlowGRPC::Service, ::flow_grpc::PortDumpRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FlowGRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow_grpc::PortDumpRequest* req,
             ::flow_grpc::Response* resp) {
               return service->PortPipesDump(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlowGRPC_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlowGRPC::Service, ::flow_grpc::QueryRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FlowGRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow_grpc::QueryRequest* req,
             ::flow_grpc::Response* resp) {
               return service->Query(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlowGRPC_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlowGRPC::Service, ::flow_grpc::PortFlushRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FlowGRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow_grpc::PortFlushRequest* req,
             ::flow_grpc::Response* resp) {
               return service->FlushPort(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlowGRPC_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlowGRPC::Service, ::flow_grpc::RmEntryRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FlowGRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow_grpc::RmEntryRequest* req,
             ::flow_grpc::Response* resp) {
               return service->RmEntry(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlowGRPC_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlowGRPC::Service, ::flow_grpc::DestroyPipeRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FlowGRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow_grpc::DestroyPipeRequest* req,
             ::flow_grpc::Response* resp) {
               return service->DestroyPipe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlowGRPC_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlowGRPC::Service, ::flow_grpc::EnvDestroyRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FlowGRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow_grpc::EnvDestroyRequest* req,
             ::flow_grpc::Response* resp) {
               return service->EnvDestroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlowGRPC_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlowGRPC::Service, ::flow_grpc::DestroyPortRequest, ::flow_grpc::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FlowGRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flow_grpc::DestroyPortRequest* req,
             ::flow_grpc::Response* resp) {
               return service->DestroyPort(ctx, req, resp);
             }, this)));
}

FlowGRPC::Service::~Service() {
}

::grpc::Status FlowGRPC::Service::EnvInitialize(::grpc::ServerContext* context, const ::flow_grpc::DPDKConfig* request, ::flow_grpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlowGRPC::Service::GRPCInitialize(::grpc::ServerContext* context, const ::flow_grpc::GRPCConfig* request, ::flow_grpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlowGRPC::Service::PortStart(::grpc::ServerContext* context, const ::flow_grpc::FlowPortConfig* request, ::flow_grpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlowGRPC::Service::PortPair(::grpc::ServerContext* context, const ::flow_grpc::PortPairRequest* request, ::flow_grpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlowGRPC::Service::CreatePipe(::grpc::ServerContext* context, const ::flow_grpc::CreatePipeRequest* request, ::flow_grpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlowGRPC::Service::AddEntry(::grpc::ServerContext* context, const ::flow_grpc::AddEntryRequest* request, ::flow_grpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlowGRPC::Service::PortPipesDump(::grpc::ServerContext* context, const ::flow_grpc::PortDumpRequest* request, ::flow_grpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlowGRPC::Service::Query(::grpc::ServerContext* context, const ::flow_grpc::QueryRequest* request, ::flow_grpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlowGRPC::Service::FlushPort(::grpc::ServerContext* context, const ::flow_grpc::PortFlushRequest* request, ::flow_grpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlowGRPC::Service::RmEntry(::grpc::ServerContext* context, const ::flow_grpc::RmEntryRequest* request, ::flow_grpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlowGRPC::Service::DestroyPipe(::grpc::ServerContext* context, const ::flow_grpc::DestroyPipeRequest* request, ::flow_grpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlowGRPC::Service::EnvDestroy(::grpc::ServerContext* context, const ::flow_grpc::EnvDestroyRequest* request, ::flow_grpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FlowGRPC::Service::DestroyPort(::grpc::ServerContext* context, const ::flow_grpc::DestroyPortRequest* request, ::flow_grpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace flow_grpc


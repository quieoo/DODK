// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc_orchestrator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpc_5forchestrator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpc_5forchestrator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpc_5forchestrator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpc_5forchestrator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpc_5forchestrator_2eproto;
namespace orchestaror {
class CMD;
struct CMDDefaultTypeInternal;
extern CMDDefaultTypeInternal _CMD_default_instance_;
class ProgramList;
struct ProgramListDefaultTypeInternal;
extern ProgramListDefaultTypeInternal _ProgramList_default_instance_;
class ProgramListReq;
struct ProgramListReqDefaultTypeInternal;
extern ProgramListReqDefaultTypeInternal _ProgramListReq_default_instance_;
class Reply;
struct ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class RichStatus;
struct RichStatusDefaultTypeInternal;
extern RichStatusDefaultTypeInternal _RichStatus_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class Uid;
struct UidDefaultTypeInternal;
extern UidDefaultTypeInternal _Uid_default_instance_;
}  // namespace orchestaror
PROTOBUF_NAMESPACE_OPEN
template<> ::orchestaror::CMD* Arena::CreateMaybeMessage<::orchestaror::CMD>(Arena*);
template<> ::orchestaror::ProgramList* Arena::CreateMaybeMessage<::orchestaror::ProgramList>(Arena*);
template<> ::orchestaror::ProgramListReq* Arena::CreateMaybeMessage<::orchestaror::ProgramListReq>(Arena*);
template<> ::orchestaror::Reply* Arena::CreateMaybeMessage<::orchestaror::Reply>(Arena*);
template<> ::orchestaror::RichStatus* Arena::CreateMaybeMessage<::orchestaror::RichStatus>(Arena*);
template<> ::orchestaror::Status* Arena::CreateMaybeMessage<::orchestaror::Status>(Arena*);
template<> ::orchestaror::Uid* Arena::CreateMaybeMessage<::orchestaror::Uid>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace orchestaror {

// ===================================================================

class ProgramListReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:orchestaror.ProgramListReq) */ {
 public:
  inline ProgramListReq() : ProgramListReq(nullptr) {}
  explicit constexpr ProgramListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProgramListReq(const ProgramListReq& from);
  ProgramListReq(ProgramListReq&& from) noexcept
    : ProgramListReq() {
    *this = ::std::move(from);
  }

  inline ProgramListReq& operator=(const ProgramListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgramListReq& operator=(ProgramListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProgramListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProgramListReq* internal_default_instance() {
    return reinterpret_cast<const ProgramListReq*>(
               &_ProgramListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProgramListReq& a, ProgramListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ProgramListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProgramListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProgramListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProgramListReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ProgramListReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ProgramListReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orchestaror.ProgramListReq";
  }
  protected:
  explicit ProgramListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:orchestaror.ProgramListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5forchestrator_2eproto;
};
// -------------------------------------------------------------------

class ProgramList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orchestaror.ProgramList) */ {
 public:
  inline ProgramList() : ProgramList(nullptr) {}
  ~ProgramList() override;
  explicit constexpr ProgramList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProgramList(const ProgramList& from);
  ProgramList(ProgramList&& from) noexcept
    : ProgramList() {
    *this = ::std::move(from);
  }

  inline ProgramList& operator=(const ProgramList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgramList& operator=(ProgramList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProgramList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProgramList* internal_default_instance() {
    return reinterpret_cast<const ProgramList*>(
               &_ProgramList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProgramList& a, ProgramList& b) {
    a.Swap(&b);
  }
  inline void Swap(ProgramList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProgramList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProgramList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProgramList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProgramList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProgramList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orchestaror.ProgramList";
  }
  protected:
  explicit ProgramList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgramNamesFieldNumber = 1,
  };
  // repeated string program_names = 1;
  int program_names_size() const;
  private:
  int _internal_program_names_size() const;
  public:
  void clear_program_names();
  const std::string& program_names(int index) const;
  std::string* mutable_program_names(int index);
  void set_program_names(int index, const std::string& value);
  void set_program_names(int index, std::string&& value);
  void set_program_names(int index, const char* value);
  void set_program_names(int index, const char* value, size_t size);
  std::string* add_program_names();
  void add_program_names(const std::string& value);
  void add_program_names(std::string&& value);
  void add_program_names(const char* value);
  void add_program_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& program_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_program_names();
  private:
  const std::string& _internal_program_names(int index) const;
  std::string* _internal_add_program_names();
  public:

  // @@protoc_insertion_point(class_scope:orchestaror.ProgramList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> program_names_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5forchestrator_2eproto;
};
// -------------------------------------------------------------------

class CMD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orchestaror.CMD) */ {
 public:
  inline CMD() : CMD(nullptr) {}
  ~CMD() override;
  explicit constexpr CMD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMD(const CMD& from);
  CMD(CMD&& from) noexcept
    : CMD() {
    *this = ::std::move(from);
  }

  inline CMD& operator=(const CMD& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMD& operator=(CMD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMD& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMD* internal_default_instance() {
    return reinterpret_cast<const CMD*>(
               &_CMD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMD& a, CMD& b) {
    a.Swap(&b);
  }
  inline void Swap(CMD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMD& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMD& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMD* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orchestaror.CMD";
  }
  protected:
  explicit CMD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdStrFieldNumber = 1,
  };
  // string cmd_str = 1;
  void clear_cmd_str();
  const std::string& cmd_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cmd_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cmd_str();
  PROTOBUF_NODISCARD std::string* release_cmd_str();
  void set_allocated_cmd_str(std::string* cmd_str);
  private:
  const std::string& _internal_cmd_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmd_str(const std::string& value);
  std::string* _internal_mutable_cmd_str();
  public:

  // @@protoc_insertion_point(class_scope:orchestaror.CMD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_str_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5forchestrator_2eproto;
};
// -------------------------------------------------------------------

class Uid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orchestaror.Uid) */ {
 public:
  inline Uid() : Uid(nullptr) {}
  ~Uid() override;
  explicit constexpr Uid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Uid(const Uid& from);
  Uid(Uid&& from) noexcept
    : Uid() {
    *this = ::std::move(from);
  }

  inline Uid& operator=(const Uid& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uid& operator=(Uid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Uid& default_instance() {
    return *internal_default_instance();
  }
  static inline const Uid* internal_default_instance() {
    return reinterpret_cast<const Uid*>(
               &_Uid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Uid& a, Uid& b) {
    a.Swap(&b);
  }
  inline void Swap(Uid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Uid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Uid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Uid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Uid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Uid& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orchestaror.Uid";
  }
  protected:
  explicit Uid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // string uid = 1;
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // @@protoc_insertion_point(class_scope:orchestaror.Uid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5forchestrator_2eproto;
};
// -------------------------------------------------------------------

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orchestaror.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit constexpr Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Status& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orchestaror.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgFieldNumber = 2,
    kIsErrorFieldNumber = 1,
  };
  // string error_msg = 2;
  void clear_error_msg();
  const std::string& error_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_msg();
  PROTOBUF_NODISCARD std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // bool is_error = 1;
  void clear_is_error();
  bool is_error() const;
  void set_is_error(bool value);
  private:
  bool _internal_is_error() const;
  void _internal_set_is_error(bool value);
  public:

  // @@protoc_insertion_point(class_scope:orchestaror.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  bool is_error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5forchestrator_2eproto;
};
// -------------------------------------------------------------------

class RichStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orchestaror.RichStatus) */ {
 public:
  inline RichStatus() : RichStatus(nullptr) {}
  ~RichStatus() override;
  explicit constexpr RichStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RichStatus(const RichStatus& from);
  RichStatus(RichStatus&& from) noexcept
    : RichStatus() {
    *this = ::std::move(from);
  }

  inline RichStatus& operator=(const RichStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RichStatus& operator=(RichStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RichStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const RichStatus* internal_default_instance() {
    return reinterpret_cast<const RichStatus*>(
               &_RichStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RichStatus& a, RichStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(RichStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RichStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RichStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RichStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RichStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RichStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RichStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orchestaror.RichStatus";
  }
  protected:
  explicit RichStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kErrStatusFieldNumber = 2,
  };
  // .orchestaror.Uid uid = 1;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  const ::orchestaror::Uid& uid() const;
  PROTOBUF_NODISCARD ::orchestaror::Uid* release_uid();
  ::orchestaror::Uid* mutable_uid();
  void set_allocated_uid(::orchestaror::Uid* uid);
  private:
  const ::orchestaror::Uid& _internal_uid() const;
  ::orchestaror::Uid* _internal_mutable_uid();
  public:
  void unsafe_arena_set_allocated_uid(
      ::orchestaror::Uid* uid);
  ::orchestaror::Uid* unsafe_arena_release_uid();

  // .orchestaror.Status err_status = 2;
  bool has_err_status() const;
  private:
  bool _internal_has_err_status() const;
  public:
  void clear_err_status();
  const ::orchestaror::Status& err_status() const;
  PROTOBUF_NODISCARD ::orchestaror::Status* release_err_status();
  ::orchestaror::Status* mutable_err_status();
  void set_allocated_err_status(::orchestaror::Status* err_status);
  private:
  const ::orchestaror::Status& _internal_err_status() const;
  ::orchestaror::Status* _internal_mutable_err_status();
  public:
  void unsafe_arena_set_allocated_err_status(
      ::orchestaror::Status* err_status);
  ::orchestaror::Status* unsafe_arena_release_err_status();

  // @@protoc_insertion_point(class_scope:orchestaror.RichStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::orchestaror::Uid* uid_;
  ::orchestaror::Status* err_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5forchestrator_2eproto;
};
// -------------------------------------------------------------------

class Reply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orchestaror.Reply) */ {
 public:
  inline Reply() : Reply(nullptr) {}
  ~Reply() override;
  explicit constexpr Reply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Reply(const Reply& from);
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reply& operator=(Reply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Reply& default_instance() {
    return *internal_default_instance();
  }
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }
  inline void Swap(Reply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Reply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Reply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Reply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orchestaror.Reply";
  }
  protected:
  explicit Reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 1,
  };
  // string str = 1;
  void clear_str();
  const std::string& str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // @@protoc_insertion_point(class_scope:orchestaror.Reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpc_5forchestrator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProgramListReq

// -------------------------------------------------------------------

// ProgramList

// repeated string program_names = 1;
inline int ProgramList::_internal_program_names_size() const {
  return program_names_.size();
}
inline int ProgramList::program_names_size() const {
  return _internal_program_names_size();
}
inline void ProgramList::clear_program_names() {
  program_names_.Clear();
}
inline std::string* ProgramList::add_program_names() {
  std::string* _s = _internal_add_program_names();
  // @@protoc_insertion_point(field_add_mutable:orchestaror.ProgramList.program_names)
  return _s;
}
inline const std::string& ProgramList::_internal_program_names(int index) const {
  return program_names_.Get(index);
}
inline const std::string& ProgramList::program_names(int index) const {
  // @@protoc_insertion_point(field_get:orchestaror.ProgramList.program_names)
  return _internal_program_names(index);
}
inline std::string* ProgramList::mutable_program_names(int index) {
  // @@protoc_insertion_point(field_mutable:orchestaror.ProgramList.program_names)
  return program_names_.Mutable(index);
}
inline void ProgramList::set_program_names(int index, const std::string& value) {
  program_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:orchestaror.ProgramList.program_names)
}
inline void ProgramList::set_program_names(int index, std::string&& value) {
  program_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:orchestaror.ProgramList.program_names)
}
inline void ProgramList::set_program_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  program_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:orchestaror.ProgramList.program_names)
}
inline void ProgramList::set_program_names(int index, const char* value, size_t size) {
  program_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:orchestaror.ProgramList.program_names)
}
inline std::string* ProgramList::_internal_add_program_names() {
  return program_names_.Add();
}
inline void ProgramList::add_program_names(const std::string& value) {
  program_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:orchestaror.ProgramList.program_names)
}
inline void ProgramList::add_program_names(std::string&& value) {
  program_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:orchestaror.ProgramList.program_names)
}
inline void ProgramList::add_program_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  program_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:orchestaror.ProgramList.program_names)
}
inline void ProgramList::add_program_names(const char* value, size_t size) {
  program_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:orchestaror.ProgramList.program_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProgramList::program_names() const {
  // @@protoc_insertion_point(field_list:orchestaror.ProgramList.program_names)
  return program_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProgramList::mutable_program_names() {
  // @@protoc_insertion_point(field_mutable_list:orchestaror.ProgramList.program_names)
  return &program_names_;
}

// -------------------------------------------------------------------

// CMD

// string cmd_str = 1;
inline void CMD::clear_cmd_str() {
  cmd_str_.ClearToEmpty();
}
inline const std::string& CMD::cmd_str() const {
  // @@protoc_insertion_point(field_get:orchestaror.CMD.cmd_str)
  return _internal_cmd_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMD::set_cmd_str(ArgT0&& arg0, ArgT... args) {
 
 cmd_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orchestaror.CMD.cmd_str)
}
inline std::string* CMD::mutable_cmd_str() {
  std::string* _s = _internal_mutable_cmd_str();
  // @@protoc_insertion_point(field_mutable:orchestaror.CMD.cmd_str)
  return _s;
}
inline const std::string& CMD::_internal_cmd_str() const {
  return cmd_str_.Get();
}
inline void CMD::_internal_set_cmd_str(const std::string& value) {
  
  cmd_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMD::_internal_mutable_cmd_str() {
  
  return cmd_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMD::release_cmd_str() {
  // @@protoc_insertion_point(field_release:orchestaror.CMD.cmd_str)
  return cmd_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMD::set_allocated_cmd_str(std::string* cmd_str) {
  if (cmd_str != nullptr) {
    
  } else {
    
  }
  cmd_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd_str,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cmd_str_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cmd_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orchestaror.CMD.cmd_str)
}

// -------------------------------------------------------------------

// Uid

// string uid = 1;
inline void Uid::clear_uid() {
  uid_.ClearToEmpty();
}
inline const std::string& Uid::uid() const {
  // @@protoc_insertion_point(field_get:orchestaror.Uid.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Uid::set_uid(ArgT0&& arg0, ArgT... args) {
 
 uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orchestaror.Uid.uid)
}
inline std::string* Uid::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:orchestaror.Uid.uid)
  return _s;
}
inline const std::string& Uid::_internal_uid() const {
  return uid_.Get();
}
inline void Uid::_internal_set_uid(const std::string& value) {
  
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Uid::_internal_mutable_uid() {
  
  return uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Uid::release_uid() {
  // @@protoc_insertion_point(field_release:orchestaror.Uid.uid)
  return uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Uid::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orchestaror.Uid.uid)
}

// -------------------------------------------------------------------

// Status

// bool is_error = 1;
inline void Status::clear_is_error() {
  is_error_ = false;
}
inline bool Status::_internal_is_error() const {
  return is_error_;
}
inline bool Status::is_error() const {
  // @@protoc_insertion_point(field_get:orchestaror.Status.is_error)
  return _internal_is_error();
}
inline void Status::_internal_set_is_error(bool value) {
  
  is_error_ = value;
}
inline void Status::set_is_error(bool value) {
  _internal_set_is_error(value);
  // @@protoc_insertion_point(field_set:orchestaror.Status.is_error)
}

// string error_msg = 2;
inline void Status::clear_error_msg() {
  error_msg_.ClearToEmpty();
}
inline const std::string& Status::error_msg() const {
  // @@protoc_insertion_point(field_get:orchestaror.Status.error_msg)
  return _internal_error_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Status::set_error_msg(ArgT0&& arg0, ArgT... args) {
 
 error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orchestaror.Status.error_msg)
}
inline std::string* Status::mutable_error_msg() {
  std::string* _s = _internal_mutable_error_msg();
  // @@protoc_insertion_point(field_mutable:orchestaror.Status.error_msg)
  return _s;
}
inline const std::string& Status::_internal_error_msg() const {
  return error_msg_.Get();
}
inline void Status::_internal_set_error_msg(const std::string& value) {
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Status::_internal_mutable_error_msg() {
  
  return error_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Status::release_error_msg() {
  // @@protoc_insertion_point(field_release:orchestaror.Status.error_msg)
  return error_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Status::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orchestaror.Status.error_msg)
}

// -------------------------------------------------------------------

// RichStatus

// .orchestaror.Uid uid = 1;
inline bool RichStatus::_internal_has_uid() const {
  return this != internal_default_instance() && uid_ != nullptr;
}
inline bool RichStatus::has_uid() const {
  return _internal_has_uid();
}
inline void RichStatus::clear_uid() {
  if (GetArenaForAllocation() == nullptr && uid_ != nullptr) {
    delete uid_;
  }
  uid_ = nullptr;
}
inline const ::orchestaror::Uid& RichStatus::_internal_uid() const {
  const ::orchestaror::Uid* p = uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::orchestaror::Uid&>(
      ::orchestaror::_Uid_default_instance_);
}
inline const ::orchestaror::Uid& RichStatus::uid() const {
  // @@protoc_insertion_point(field_get:orchestaror.RichStatus.uid)
  return _internal_uid();
}
inline void RichStatus::unsafe_arena_set_allocated_uid(
    ::orchestaror::Uid* uid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_);
  }
  uid_ = uid;
  if (uid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:orchestaror.RichStatus.uid)
}
inline ::orchestaror::Uid* RichStatus::release_uid() {
  
  ::orchestaror::Uid* temp = uid_;
  uid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::orchestaror::Uid* RichStatus::unsafe_arena_release_uid() {
  // @@protoc_insertion_point(field_release:orchestaror.RichStatus.uid)
  
  ::orchestaror::Uid* temp = uid_;
  uid_ = nullptr;
  return temp;
}
inline ::orchestaror::Uid* RichStatus::_internal_mutable_uid() {
  
  if (uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::orchestaror::Uid>(GetArenaForAllocation());
    uid_ = p;
  }
  return uid_;
}
inline ::orchestaror::Uid* RichStatus::mutable_uid() {
  ::orchestaror::Uid* _msg = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:orchestaror.RichStatus.uid)
  return _msg;
}
inline void RichStatus::set_allocated_uid(::orchestaror::Uid* uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete uid_;
  }
  if (uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::orchestaror::Uid>::GetOwningArena(uid);
    if (message_arena != submessage_arena) {
      uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uid, submessage_arena);
    }
    
  } else {
    
  }
  uid_ = uid;
  // @@protoc_insertion_point(field_set_allocated:orchestaror.RichStatus.uid)
}

// .orchestaror.Status err_status = 2;
inline bool RichStatus::_internal_has_err_status() const {
  return this != internal_default_instance() && err_status_ != nullptr;
}
inline bool RichStatus::has_err_status() const {
  return _internal_has_err_status();
}
inline void RichStatus::clear_err_status() {
  if (GetArenaForAllocation() == nullptr && err_status_ != nullptr) {
    delete err_status_;
  }
  err_status_ = nullptr;
}
inline const ::orchestaror::Status& RichStatus::_internal_err_status() const {
  const ::orchestaror::Status* p = err_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::orchestaror::Status&>(
      ::orchestaror::_Status_default_instance_);
}
inline const ::orchestaror::Status& RichStatus::err_status() const {
  // @@protoc_insertion_point(field_get:orchestaror.RichStatus.err_status)
  return _internal_err_status();
}
inline void RichStatus::unsafe_arena_set_allocated_err_status(
    ::orchestaror::Status* err_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(err_status_);
  }
  err_status_ = err_status;
  if (err_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:orchestaror.RichStatus.err_status)
}
inline ::orchestaror::Status* RichStatus::release_err_status() {
  
  ::orchestaror::Status* temp = err_status_;
  err_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::orchestaror::Status* RichStatus::unsafe_arena_release_err_status() {
  // @@protoc_insertion_point(field_release:orchestaror.RichStatus.err_status)
  
  ::orchestaror::Status* temp = err_status_;
  err_status_ = nullptr;
  return temp;
}
inline ::orchestaror::Status* RichStatus::_internal_mutable_err_status() {
  
  if (err_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::orchestaror::Status>(GetArenaForAllocation());
    err_status_ = p;
  }
  return err_status_;
}
inline ::orchestaror::Status* RichStatus::mutable_err_status() {
  ::orchestaror::Status* _msg = _internal_mutable_err_status();
  // @@protoc_insertion_point(field_mutable:orchestaror.RichStatus.err_status)
  return _msg;
}
inline void RichStatus::set_allocated_err_status(::orchestaror::Status* err_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete err_status_;
  }
  if (err_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::orchestaror::Status>::GetOwningArena(err_status);
    if (message_arena != submessage_arena) {
      err_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, err_status, submessage_arena);
    }
    
  } else {
    
  }
  err_status_ = err_status;
  // @@protoc_insertion_point(field_set_allocated:orchestaror.RichStatus.err_status)
}

// -------------------------------------------------------------------

// Reply

// string str = 1;
inline void Reply::clear_str() {
  str_.ClearToEmpty();
}
inline const std::string& Reply::str() const {
  // @@protoc_insertion_point(field_get:orchestaror.Reply.str)
  return _internal_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Reply::set_str(ArgT0&& arg0, ArgT... args) {
 
 str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orchestaror.Reply.str)
}
inline std::string* Reply::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:orchestaror.Reply.str)
  return _s;
}
inline const std::string& Reply::_internal_str() const {
  return str_.Get();
}
inline void Reply::_internal_set_str(const std::string& value) {
  
  str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Reply::_internal_mutable_str() {
  
  return str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Reply::release_str() {
  // @@protoc_insertion_point(field_release:orchestaror.Reply.str)
  return str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Reply::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    
  } else {
    
  }
  str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orchestaror.Reply.str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace orchestaror

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpc_5forchestrator_2eproto

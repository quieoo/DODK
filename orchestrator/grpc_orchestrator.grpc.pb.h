// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpc_orchestrator.proto
// Original file comments:
//
// Copyright (c) 2021-2022 NVIDIA CORPORATION & AFFILIATES, ALL RIGHTS RESERVED.
//
// This software product is a proprietary product of NVIDIA CORPORATION &
// AFFILIATES (the "Company") and all right, title, and interest in and to the
// software product, including all associated intellectual property rights, are
// and shall remain exclusively with the Company.
//
// This software product is governed by the End User License Agreement
// provided with the software product.
//
//
#ifndef GRPC_grpc_5forchestrator_2eproto__INCLUDED
#define GRPC_grpc_5forchestrator_2eproto__INCLUDED

#include "grpc_orchestrator.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace orchestaror {

// Host (x86) -> DPU (Arm):
// ========================
// gRPC server that exposes the gRPC API to the host
// for remote boot/shutdown of gRPC Programs.
class Orchestrator final {
 public:
  static constexpr char const* service_full_name() {
    return "orchestaror.Orchestrator";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Fetch the list of gRPC-Supported Programs 
    virtual ::grpc::Status GetProgramList(::grpc::ClientContext* context, const ::orchestaror::ProgramListReq& request, ::orchestaror::ProgramList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orchestaror::ProgramList>> AsyncGetProgramList(::grpc::ClientContext* context, const ::orchestaror::ProgramListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orchestaror::ProgramList>>(AsyncGetProgramListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orchestaror::ProgramList>> PrepareAsyncGetProgramList(::grpc::ClientContext* context, const ::orchestaror::ProgramListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orchestaror::ProgramList>>(PrepareAsyncGetProgramListRaw(context, request, cq));
    }
    // Invoke a given gRPC-Supported program 
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::orchestaror::CMD& request, ::orchestaror::RichStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orchestaror::RichStatus>> AsyncCreate(::grpc::ClientContext* context, const ::orchestaror::CMD& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orchestaror::RichStatus>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orchestaror::RichStatus>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::orchestaror::CMD& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orchestaror::RichStatus>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    // Destroy a given gRPC-Supported program 
    virtual ::grpc::Status Destroy(::grpc::ClientContext* context, const ::orchestaror::Uid& request, ::orchestaror::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orchestaror::Status>> AsyncDestroy(::grpc::ClientContext* context, const ::orchestaror::Uid& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orchestaror::Status>>(AsyncDestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orchestaror::Status>> PrepareAsyncDestroy(::grpc::ClientContext* context, const ::orchestaror::Uid& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orchestaror::Status>>(PrepareAsyncDestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::orchestaror::Reply>> Create_Attach(::grpc::ClientContext* context, const ::orchestaror::CMD& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::orchestaror::Reply>>(Create_AttachRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::orchestaror::Reply>> AsyncCreate_Attach(::grpc::ClientContext* context, const ::orchestaror::CMD& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::orchestaror::Reply>>(AsyncCreate_AttachRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::orchestaror::Reply>> PrepareAsyncCreate_Attach(::grpc::ClientContext* context, const ::orchestaror::CMD& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::orchestaror::Reply>>(PrepareAsyncCreate_AttachRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Fetch the list of gRPC-Supported Programs 
      virtual void GetProgramList(::grpc::ClientContext* context, const ::orchestaror::ProgramListReq* request, ::orchestaror::ProgramList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProgramList(::grpc::ClientContext* context, const ::orchestaror::ProgramListReq* request, ::orchestaror::ProgramList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Invoke a given gRPC-Supported program 
      virtual void Create(::grpc::ClientContext* context, const ::orchestaror::CMD* request, ::orchestaror::RichStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::orchestaror::CMD* request, ::orchestaror::RichStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Destroy a given gRPC-Supported program 
      virtual void Destroy(::grpc::ClientContext* context, const ::orchestaror::Uid* request, ::orchestaror::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Destroy(::grpc::ClientContext* context, const ::orchestaror::Uid* request, ::orchestaror::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Create_Attach(::grpc::ClientContext* context, const ::orchestaror::CMD* request, ::grpc::ClientReadReactor< ::orchestaror::Reply>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::orchestaror::ProgramList>* AsyncGetProgramListRaw(::grpc::ClientContext* context, const ::orchestaror::ProgramListReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::orchestaror::ProgramList>* PrepareAsyncGetProgramListRaw(::grpc::ClientContext* context, const ::orchestaror::ProgramListReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::orchestaror::RichStatus>* AsyncCreateRaw(::grpc::ClientContext* context, const ::orchestaror::CMD& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::orchestaror::RichStatus>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::orchestaror::CMD& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::orchestaror::Status>* AsyncDestroyRaw(::grpc::ClientContext* context, const ::orchestaror::Uid& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::orchestaror::Status>* PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::orchestaror::Uid& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::orchestaror::Reply>* Create_AttachRaw(::grpc::ClientContext* context, const ::orchestaror::CMD& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::orchestaror::Reply>* AsyncCreate_AttachRaw(::grpc::ClientContext* context, const ::orchestaror::CMD& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::orchestaror::Reply>* PrepareAsyncCreate_AttachRaw(::grpc::ClientContext* context, const ::orchestaror::CMD& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetProgramList(::grpc::ClientContext* context, const ::orchestaror::ProgramListReq& request, ::orchestaror::ProgramList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orchestaror::ProgramList>> AsyncGetProgramList(::grpc::ClientContext* context, const ::orchestaror::ProgramListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orchestaror::ProgramList>>(AsyncGetProgramListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orchestaror::ProgramList>> PrepareAsyncGetProgramList(::grpc::ClientContext* context, const ::orchestaror::ProgramListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orchestaror::ProgramList>>(PrepareAsyncGetProgramListRaw(context, request, cq));
    }
    ::grpc::Status Create(::grpc::ClientContext* context, const ::orchestaror::CMD& request, ::orchestaror::RichStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orchestaror::RichStatus>> AsyncCreate(::grpc::ClientContext* context, const ::orchestaror::CMD& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orchestaror::RichStatus>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orchestaror::RichStatus>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::orchestaror::CMD& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orchestaror::RichStatus>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status Destroy(::grpc::ClientContext* context, const ::orchestaror::Uid& request, ::orchestaror::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orchestaror::Status>> AsyncDestroy(::grpc::ClientContext* context, const ::orchestaror::Uid& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orchestaror::Status>>(AsyncDestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orchestaror::Status>> PrepareAsyncDestroy(::grpc::ClientContext* context, const ::orchestaror::Uid& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orchestaror::Status>>(PrepareAsyncDestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::orchestaror::Reply>> Create_Attach(::grpc::ClientContext* context, const ::orchestaror::CMD& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::orchestaror::Reply>>(Create_AttachRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::orchestaror::Reply>> AsyncCreate_Attach(::grpc::ClientContext* context, const ::orchestaror::CMD& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::orchestaror::Reply>>(AsyncCreate_AttachRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::orchestaror::Reply>> PrepareAsyncCreate_Attach(::grpc::ClientContext* context, const ::orchestaror::CMD& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::orchestaror::Reply>>(PrepareAsyncCreate_AttachRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetProgramList(::grpc::ClientContext* context, const ::orchestaror::ProgramListReq* request, ::orchestaror::ProgramList* response, std::function<void(::grpc::Status)>) override;
      void GetProgramList(::grpc::ClientContext* context, const ::orchestaror::ProgramListReq* request, ::orchestaror::ProgramList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Create(::grpc::ClientContext* context, const ::orchestaror::CMD* request, ::orchestaror::RichStatus* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::orchestaror::CMD* request, ::orchestaror::RichStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Destroy(::grpc::ClientContext* context, const ::orchestaror::Uid* request, ::orchestaror::Status* response, std::function<void(::grpc::Status)>) override;
      void Destroy(::grpc::ClientContext* context, const ::orchestaror::Uid* request, ::orchestaror::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Create_Attach(::grpc::ClientContext* context, const ::orchestaror::CMD* request, ::grpc::ClientReadReactor< ::orchestaror::Reply>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::orchestaror::ProgramList>* AsyncGetProgramListRaw(::grpc::ClientContext* context, const ::orchestaror::ProgramListReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::orchestaror::ProgramList>* PrepareAsyncGetProgramListRaw(::grpc::ClientContext* context, const ::orchestaror::ProgramListReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::orchestaror::RichStatus>* AsyncCreateRaw(::grpc::ClientContext* context, const ::orchestaror::CMD& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::orchestaror::RichStatus>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::orchestaror::CMD& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::orchestaror::Status>* AsyncDestroyRaw(::grpc::ClientContext* context, const ::orchestaror::Uid& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::orchestaror::Status>* PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::orchestaror::Uid& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::orchestaror::Reply>* Create_AttachRaw(::grpc::ClientContext* context, const ::orchestaror::CMD& request) override;
    ::grpc::ClientAsyncReader< ::orchestaror::Reply>* AsyncCreate_AttachRaw(::grpc::ClientContext* context, const ::orchestaror::CMD& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::orchestaror::Reply>* PrepareAsyncCreate_AttachRaw(::grpc::ClientContext* context, const ::orchestaror::CMD& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetProgramList_;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_Destroy_;
    const ::grpc::internal::RpcMethod rpcmethod_Create_Attach_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Fetch the list of gRPC-Supported Programs 
    virtual ::grpc::Status GetProgramList(::grpc::ServerContext* context, const ::orchestaror::ProgramListReq* request, ::orchestaror::ProgramList* response);
    // Invoke a given gRPC-Supported program 
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::orchestaror::CMD* request, ::orchestaror::RichStatus* response);
    // Destroy a given gRPC-Supported program 
    virtual ::grpc::Status Destroy(::grpc::ServerContext* context, const ::orchestaror::Uid* request, ::orchestaror::Status* response);
    virtual ::grpc::Status Create_Attach(::grpc::ServerContext* context, const ::orchestaror::CMD* request, ::grpc::ServerWriter< ::orchestaror::Reply>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProgramList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProgramList() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetProgramList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProgramList(::grpc::ServerContext* /*context*/, const ::orchestaror::ProgramListReq* /*request*/, ::orchestaror::ProgramList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProgramList(::grpc::ServerContext* context, ::orchestaror::ProgramListReq* request, ::grpc::ServerAsyncResponseWriter< ::orchestaror::ProgramList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::orchestaror::CMD* /*request*/, ::orchestaror::RichStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::orchestaror::CMD* request, ::grpc::ServerAsyncResponseWriter< ::orchestaror::RichStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Destroy() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Destroy(::grpc::ServerContext* /*context*/, const ::orchestaror::Uid* /*request*/, ::orchestaror::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroy(::grpc::ServerContext* context, ::orchestaror::Uid* request, ::grpc::ServerAsyncResponseWriter< ::orchestaror::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Create_Attach : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create_Attach() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Create_Attach() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create_Attach(::grpc::ServerContext* /*context*/, const ::orchestaror::CMD* /*request*/, ::grpc::ServerWriter< ::orchestaror::Reply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate_Attach(::grpc::ServerContext* context, ::orchestaror::CMD* request, ::grpc::ServerAsyncWriter< ::orchestaror::Reply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetProgramList<WithAsyncMethod_Create<WithAsyncMethod_Destroy<WithAsyncMethod_Create_Attach<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetProgramList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetProgramList() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::orchestaror::ProgramListReq, ::orchestaror::ProgramList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::orchestaror::ProgramListReq* request, ::orchestaror::ProgramList* response) { return this->GetProgramList(context, request, response); }));}
    void SetMessageAllocatorFor_GetProgramList(
        ::grpc::MessageAllocator< ::orchestaror::ProgramListReq, ::orchestaror::ProgramList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::orchestaror::ProgramListReq, ::orchestaror::ProgramList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetProgramList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProgramList(::grpc::ServerContext* /*context*/, const ::orchestaror::ProgramListReq* /*request*/, ::orchestaror::ProgramList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProgramList(
      ::grpc::CallbackServerContext* /*context*/, const ::orchestaror::ProgramListReq* /*request*/, ::orchestaror::ProgramList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Create() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::orchestaror::CMD, ::orchestaror::RichStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::orchestaror::CMD* request, ::orchestaror::RichStatus* response) { return this->Create(context, request, response); }));}
    void SetMessageAllocatorFor_Create(
        ::grpc::MessageAllocator< ::orchestaror::CMD, ::orchestaror::RichStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::orchestaror::CMD, ::orchestaror::RichStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::orchestaror::CMD* /*request*/, ::orchestaror::RichStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::orchestaror::CMD* /*request*/, ::orchestaror::RichStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Destroy() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::orchestaror::Uid, ::orchestaror::Status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::orchestaror::Uid* request, ::orchestaror::Status* response) { return this->Destroy(context, request, response); }));}
    void SetMessageAllocatorFor_Destroy(
        ::grpc::MessageAllocator< ::orchestaror::Uid, ::orchestaror::Status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::orchestaror::Uid, ::orchestaror::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Destroy(::grpc::ServerContext* /*context*/, const ::orchestaror::Uid* /*request*/, ::orchestaror::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::orchestaror::Uid* /*request*/, ::orchestaror::Status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Create_Attach : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Create_Attach() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::orchestaror::CMD, ::orchestaror::Reply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::orchestaror::CMD* request) { return this->Create_Attach(context, request); }));
    }
    ~WithCallbackMethod_Create_Attach() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create_Attach(::grpc::ServerContext* /*context*/, const ::orchestaror::CMD* /*request*/, ::grpc::ServerWriter< ::orchestaror::Reply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::orchestaror::Reply>* Create_Attach(
      ::grpc::CallbackServerContext* /*context*/, const ::orchestaror::CMD* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetProgramList<WithCallbackMethod_Create<WithCallbackMethod_Destroy<WithCallbackMethod_Create_Attach<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetProgramList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProgramList() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetProgramList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProgramList(::grpc::ServerContext* /*context*/, const ::orchestaror::ProgramListReq* /*request*/, ::orchestaror::ProgramList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::orchestaror::CMD* /*request*/, ::orchestaror::RichStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Destroy() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Destroy(::grpc::ServerContext* /*context*/, const ::orchestaror::Uid* /*request*/, ::orchestaror::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Create_Attach : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create_Attach() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Create_Attach() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create_Attach(::grpc::ServerContext* /*context*/, const ::orchestaror::CMD* /*request*/, ::grpc::ServerWriter< ::orchestaror::Reply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProgramList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProgramList() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetProgramList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProgramList(::grpc::ServerContext* /*context*/, const ::orchestaror::ProgramListReq* /*request*/, ::orchestaror::ProgramList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProgramList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::orchestaror::CMD* /*request*/, ::orchestaror::RichStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Destroy() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Destroy(::grpc::ServerContext* /*context*/, const ::orchestaror::Uid* /*request*/, ::orchestaror::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create_Attach : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create_Attach() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Create_Attach() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create_Attach(::grpc::ServerContext* /*context*/, const ::orchestaror::CMD* /*request*/, ::grpc::ServerWriter< ::orchestaror::Reply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate_Attach(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetProgramList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetProgramList() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetProgramList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetProgramList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProgramList(::grpc::ServerContext* /*context*/, const ::orchestaror::ProgramListReq* /*request*/, ::orchestaror::ProgramList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProgramList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Create() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Create(context, request, response); }));
    }
    ~WithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::orchestaror::CMD* /*request*/, ::orchestaror::RichStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Destroy() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Destroy(context, request, response); }));
    }
    ~WithRawCallbackMethod_Destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Destroy(::grpc::ServerContext* /*context*/, const ::orchestaror::Uid* /*request*/, ::orchestaror::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Create_Attach : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Create_Attach() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Create_Attach(context, request); }));
    }
    ~WithRawCallbackMethod_Create_Attach() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create_Attach(::grpc::ServerContext* /*context*/, const ::orchestaror::CMD* /*request*/, ::grpc::ServerWriter< ::orchestaror::Reply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Create_Attach(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProgramList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetProgramList() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::orchestaror::ProgramListReq, ::orchestaror::ProgramList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::orchestaror::ProgramListReq, ::orchestaror::ProgramList>* streamer) {
                       return this->StreamedGetProgramList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetProgramList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProgramList(::grpc::ServerContext* /*context*/, const ::orchestaror::ProgramListReq* /*request*/, ::orchestaror::ProgramList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProgramList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::orchestaror::ProgramListReq,::orchestaror::ProgramList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::orchestaror::CMD, ::orchestaror::RichStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::orchestaror::CMD, ::orchestaror::RichStatus>* streamer) {
                       return this->StreamedCreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::orchestaror::CMD* /*request*/, ::orchestaror::RichStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::orchestaror::CMD,::orchestaror::RichStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Destroy() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::orchestaror::Uid, ::orchestaror::Status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::orchestaror::Uid, ::orchestaror::Status>* streamer) {
                       return this->StreamedDestroy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Destroy(::grpc::ServerContext* /*context*/, const ::orchestaror::Uid* /*request*/, ::orchestaror::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDestroy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::orchestaror::Uid,::orchestaror::Status>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetProgramList<WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Destroy<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Create_Attach : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Create_Attach() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::orchestaror::CMD, ::orchestaror::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::orchestaror::CMD, ::orchestaror::Reply>* streamer) {
                       return this->StreamedCreate_Attach(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Create_Attach() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create_Attach(::grpc::ServerContext* /*context*/, const ::orchestaror::CMD* /*request*/, ::grpc::ServerWriter< ::orchestaror::Reply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedCreate_Attach(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::orchestaror::CMD,::orchestaror::Reply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Create_Attach<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetProgramList<WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Destroy<WithSplitStreamingMethod_Create_Attach<Service > > > > StreamedService;
};

}  // namespace orchestaror


#endif  // GRPC_grpc_5forchestrator_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc_orchestrator.proto

#include "grpc_orchestrator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace orchestaror {
constexpr ProgramListReq::ProgramListReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ProgramListReqDefaultTypeInternal {
  constexpr ProgramListReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProgramListReqDefaultTypeInternal() {}
  union {
    ProgramListReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProgramListReqDefaultTypeInternal _ProgramListReq_default_instance_;
constexpr ProgramList::ProgramList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : program_names_(){}
struct ProgramListDefaultTypeInternal {
  constexpr ProgramListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProgramListDefaultTypeInternal() {}
  union {
    ProgramList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProgramListDefaultTypeInternal _ProgramList_default_instance_;
constexpr CMD::CMD(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cmd_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMDDefaultTypeInternal {
  constexpr CMDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMDDefaultTypeInternal() {}
  union {
    CMD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMDDefaultTypeInternal _CMD_default_instance_;
constexpr Uid::Uid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UidDefaultTypeInternal {
  constexpr UidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UidDefaultTypeInternal() {}
  union {
    Uid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UidDefaultTypeInternal _Uid_default_instance_;
constexpr Status::Status(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_error_(false){}
struct StatusDefaultTypeInternal {
  constexpr StatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusDefaultTypeInternal _Status_default_instance_;
constexpr RichStatus::RichStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uid_(nullptr)
  , err_status_(nullptr){}
struct RichStatusDefaultTypeInternal {
  constexpr RichStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RichStatusDefaultTypeInternal() {}
  union {
    RichStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RichStatusDefaultTypeInternal _RichStatus_default_instance_;
constexpr Reply::Reply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ReplyDefaultTypeInternal {
  constexpr ReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReplyDefaultTypeInternal() {}
  union {
    Reply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReplyDefaultTypeInternal _Reply_default_instance_;
}  // namespace orchestaror
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_grpc_5forchestrator_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_grpc_5forchestrator_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_grpc_5forchestrator_2eproto = nullptr;

const uint32_t TableStruct_grpc_5forchestrator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::orchestaror::ProgramListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::orchestaror::ProgramList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::orchestaror::ProgramList, program_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::orchestaror::CMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::orchestaror::CMD, cmd_str_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::orchestaror::Uid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::orchestaror::Uid, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::orchestaror::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::orchestaror::Status, is_error_),
  PROTOBUF_FIELD_OFFSET(::orchestaror::Status, error_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::orchestaror::RichStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::orchestaror::RichStatus, uid_),
  PROTOBUF_FIELD_OFFSET(::orchestaror::RichStatus, err_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::orchestaror::Reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::orchestaror::Reply, str_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::orchestaror::ProgramListReq)},
  { 6, -1, -1, sizeof(::orchestaror::ProgramList)},
  { 13, -1, -1, sizeof(::orchestaror::CMD)},
  { 20, -1, -1, sizeof(::orchestaror::Uid)},
  { 27, -1, -1, sizeof(::orchestaror::Status)},
  { 35, -1, -1, sizeof(::orchestaror::RichStatus)},
  { 43, -1, -1, sizeof(::orchestaror::Reply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::orchestaror::_ProgramListReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::orchestaror::_ProgramList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::orchestaror::_CMD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::orchestaror::_Uid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::orchestaror::_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::orchestaror::_RichStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::orchestaror::_Reply_default_instance_),
};

const char descriptor_table_protodef_grpc_5forchestrator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027grpc_orchestrator.proto\022\013orchestaror\"\020"
  "\n\016ProgramListReq\"$\n\013ProgramList\022\025\n\rprogr"
  "am_names\030\001 \003(\t\"\026\n\003CMD\022\017\n\007cmd_str\030\001 \001(\t\"\022"
  "\n\003Uid\022\013\n\003uid\030\001 \001(\t\"-\n\006Status\022\020\n\010is_error"
  "\030\001 \001(\010\022\021\n\terror_msg\030\002 \001(\t\"T\n\nRichStatus\022"
  "\035\n\003uid\030\001 \001(\0132\020.orchestaror.Uid\022\'\n\nerr_st"
  "atus\030\002 \001(\0132\023.orchestaror.Status\"\024\n\005Reply"
  "\022\013\n\003str\030\001 \001(\t2\367\001\n\014Orchestrator\022G\n\016GetPro"
  "gramList\022\033.orchestaror.ProgramListReq\032\030."
  "orchestaror.ProgramList\0223\n\006Create\022\020.orch"
  "estaror.CMD\032\027.orchestaror.RichStatus\0220\n\007"
  "Destroy\022\020.orchestaror.Uid\032\023.orchestaror."
  "Status\0227\n\rCreate_Attach\022\020.orchestaror.CM"
  "D\032\022.orchestaror.Reply0\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_grpc_5forchestrator_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpc_5forchestrator_2eproto = {
  false, false, 551, descriptor_table_protodef_grpc_5forchestrator_2eproto, "grpc_orchestrator.proto", 
  &descriptor_table_grpc_5forchestrator_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_grpc_5forchestrator_2eproto::offsets,
  file_level_metadata_grpc_5forchestrator_2eproto, file_level_enum_descriptors_grpc_5forchestrator_2eproto, file_level_service_descriptors_grpc_5forchestrator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_grpc_5forchestrator_2eproto_getter() {
  return &descriptor_table_grpc_5forchestrator_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_grpc_5forchestrator_2eproto(&descriptor_table_grpc_5forchestrator_2eproto);
namespace orchestaror {

// ===================================================================

class ProgramListReq::_Internal {
 public:
};

ProgramListReq::ProgramListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:orchestaror.ProgramListReq)
}
ProgramListReq::ProgramListReq(const ProgramListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:orchestaror.ProgramListReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProgramListReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProgramListReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ProgramListReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_grpc_5forchestrator_2eproto_getter, &descriptor_table_grpc_5forchestrator_2eproto_once,
      file_level_metadata_grpc_5forchestrator_2eproto[0]);
}

// ===================================================================

class ProgramList::_Internal {
 public:
};

ProgramList::ProgramList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  program_names_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:orchestaror.ProgramList)
}
ProgramList::ProgramList(const ProgramList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      program_names_(from.program_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:orchestaror.ProgramList)
}

inline void ProgramList::SharedCtor() {
}

ProgramList::~ProgramList() {
  // @@protoc_insertion_point(destructor:orchestaror.ProgramList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProgramList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProgramList::ArenaDtor(void* object) {
  ProgramList* _this = reinterpret_cast< ProgramList* >(object);
  (void)_this;
}
void ProgramList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProgramList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProgramList::Clear() {
// @@protoc_insertion_point(message_clear_start:orchestaror.ProgramList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  program_names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProgramList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string program_names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_program_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "orchestaror.ProgramList.program_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProgramList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orchestaror.ProgramList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string program_names = 1;
  for (int i = 0, n = this->_internal_program_names_size(); i < n; i++) {
    const auto& s = this->_internal_program_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "orchestaror.ProgramList.program_names");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orchestaror.ProgramList)
  return target;
}

size_t ProgramList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orchestaror.ProgramList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string program_names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(program_names_.size());
  for (int i = 0, n = program_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      program_names_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProgramList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProgramList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProgramList::GetClassData() const { return &_class_data_; }

void ProgramList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProgramList *>(to)->MergeFrom(
      static_cast<const ProgramList &>(from));
}


void ProgramList::MergeFrom(const ProgramList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:orchestaror.ProgramList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  program_names_.MergeFrom(from.program_names_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProgramList::CopyFrom(const ProgramList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orchestaror.ProgramList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgramList::IsInitialized() const {
  return true;
}

void ProgramList::InternalSwap(ProgramList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  program_names_.InternalSwap(&other->program_names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProgramList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_grpc_5forchestrator_2eproto_getter, &descriptor_table_grpc_5forchestrator_2eproto_once,
      file_level_metadata_grpc_5forchestrator_2eproto[1]);
}

// ===================================================================

class CMD::_Internal {
 public:
};

CMD::CMD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:orchestaror.CMD)
}
CMD::CMD(const CMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cmd_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cmd_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cmd_str().empty()) {
    cmd_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cmd_str(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:orchestaror.CMD)
}

inline void CMD::SharedCtor() {
cmd_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cmd_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMD::~CMD() {
  // @@protoc_insertion_point(destructor:orchestaror.CMD)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cmd_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMD::ArenaDtor(void* object) {
  CMD* _this = reinterpret_cast< CMD* >(object);
  (void)_this;
}
void CMD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMD::Clear() {
// @@protoc_insertion_point(message_clear_start:orchestaror.CMD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_str_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cmd_str = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cmd_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "orchestaror.CMD.cmd_str"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orchestaror.CMD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cmd_str = 1;
  if (!this->_internal_cmd_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cmd_str().data(), static_cast<int>(this->_internal_cmd_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "orchestaror.CMD.cmd_str");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cmd_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orchestaror.CMD)
  return target;
}

size_t CMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orchestaror.CMD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cmd_str = 1;
  if (!this->_internal_cmd_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cmd_str());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMD::GetClassData() const { return &_class_data_; }

void CMD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMD *>(to)->MergeFrom(
      static_cast<const CMD &>(from));
}


void CMD::MergeFrom(const CMD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:orchestaror.CMD)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cmd_str().empty()) {
    _internal_set_cmd_str(from._internal_cmd_str());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMD::CopyFrom(const CMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orchestaror.CMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMD::IsInitialized() const {
  return true;
}

void CMD::InternalSwap(CMD* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cmd_str_, lhs_arena,
      &other->cmd_str_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMD::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_grpc_5forchestrator_2eproto_getter, &descriptor_table_grpc_5forchestrator_2eproto_once,
      file_level_metadata_grpc_5forchestrator_2eproto[2]);
}

// ===================================================================

class Uid::_Internal {
 public:
};

Uid::Uid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:orchestaror.Uid)
}
Uid::Uid(const Uid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:orchestaror.Uid)
}

inline void Uid::SharedCtor() {
uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Uid::~Uid() {
  // @@protoc_insertion_point(destructor:orchestaror.Uid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Uid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Uid::ArenaDtor(void* object) {
  Uid* _this = reinterpret_cast< Uid* >(object);
  (void)_this;
}
void Uid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Uid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Uid::Clear() {
// @@protoc_insertion_point(message_clear_start:orchestaror.Uid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Uid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "orchestaror.Uid.uid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Uid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orchestaror.Uid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "orchestaror.Uid.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orchestaror.Uid)
  return target;
}

size_t Uid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orchestaror.Uid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Uid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Uid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Uid::GetClassData() const { return &_class_data_; }

void Uid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Uid *>(to)->MergeFrom(
      static_cast<const Uid &>(from));
}


void Uid::MergeFrom(const Uid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:orchestaror.Uid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _internal_set_uid(from._internal_uid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Uid::CopyFrom(const Uid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orchestaror.Uid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uid::IsInitialized() const {
  return true;
}

void Uid::InternalSwap(Uid* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &uid_, lhs_arena,
      &other->uid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Uid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_grpc_5forchestrator_2eproto_getter, &descriptor_table_grpc_5forchestrator_2eproto_once,
      file_level_metadata_grpc_5forchestrator_2eproto[3]);
}

// ===================================================================

class Status::_Internal {
 public:
};

Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:orchestaror.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_msg().empty()) {
    error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_msg(), 
      GetArenaForAllocation());
  }
  is_error_ = from.is_error_;
  // @@protoc_insertion_point(copy_constructor:orchestaror.Status)
}

inline void Status::SharedCtor() {
error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
is_error_ = false;
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:orchestaror.Status)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Status::ArenaDtor(void* object) {
  Status* _this = reinterpret_cast< Status* >(object);
  (void)_this;
}
void Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:orchestaror.Status)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msg_.ClearToEmpty();
  is_error_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          is_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "orchestaror.Status.error_msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Status::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orchestaror.Status)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_error = 1;
  if (this->_internal_is_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_error(), target);
  }

  // string error_msg = 2;
  if (!this->_internal_error_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_msg().data(), static_cast<int>(this->_internal_error_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "orchestaror.Status.error_msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orchestaror.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orchestaror.Status)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_msg = 2;
  if (!this->_internal_error_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_msg());
  }

  // bool is_error = 1;
  if (this->_internal_is_error() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Status::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Status::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Status::GetClassData() const { return &_class_data_; }

void Status::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Status *>(to)->MergeFrom(
      static_cast<const Status &>(from));
}


void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:orchestaror.Status)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_msg().empty()) {
    _internal_set_error_msg(from._internal_error_msg());
  }
  if (from._internal_is_error() != 0) {
    _internal_set_is_error(from._internal_is_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orchestaror.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_msg_, lhs_arena,
      &other->error_msg_, rhs_arena
  );
  swap(is_error_, other->is_error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_grpc_5forchestrator_2eproto_getter, &descriptor_table_grpc_5forchestrator_2eproto_once,
      file_level_metadata_grpc_5forchestrator_2eproto[4]);
}

// ===================================================================

class RichStatus::_Internal {
 public:
  static const ::orchestaror::Uid& uid(const RichStatus* msg);
  static const ::orchestaror::Status& err_status(const RichStatus* msg);
};

const ::orchestaror::Uid&
RichStatus::_Internal::uid(const RichStatus* msg) {
  return *msg->uid_;
}
const ::orchestaror::Status&
RichStatus::_Internal::err_status(const RichStatus* msg) {
  return *msg->err_status_;
}
RichStatus::RichStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:orchestaror.RichStatus)
}
RichStatus::RichStatus(const RichStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uid()) {
    uid_ = new ::orchestaror::Uid(*from.uid_);
  } else {
    uid_ = nullptr;
  }
  if (from._internal_has_err_status()) {
    err_status_ = new ::orchestaror::Status(*from.err_status_);
  } else {
    err_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:orchestaror.RichStatus)
}

inline void RichStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_status_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(err_status_));
}

RichStatus::~RichStatus() {
  // @@protoc_insertion_point(destructor:orchestaror.RichStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RichStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete uid_;
  if (this != internal_default_instance()) delete err_status_;
}

void RichStatus::ArenaDtor(void* object) {
  RichStatus* _this = reinterpret_cast< RichStatus* >(object);
  (void)_this;
}
void RichStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RichStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RichStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:orchestaror.RichStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && uid_ != nullptr) {
    delete uid_;
  }
  uid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && err_status_ != nullptr) {
    delete err_status_;
  }
  err_status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RichStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .orchestaror.Uid uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .orchestaror.Status err_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_err_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RichStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orchestaror.RichStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .orchestaror.Uid uid = 1;
  if (this->_internal_has_uid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::uid(this), target, stream);
  }

  // .orchestaror.Status err_status = 2;
  if (this->_internal_has_err_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::err_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orchestaror.RichStatus)
  return target;
}

size_t RichStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orchestaror.RichStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .orchestaror.Uid uid = 1;
  if (this->_internal_has_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uid_);
  }

  // .orchestaror.Status err_status = 2;
  if (this->_internal_has_err_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *err_status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RichStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RichStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RichStatus::GetClassData() const { return &_class_data_; }

void RichStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RichStatus *>(to)->MergeFrom(
      static_cast<const RichStatus &>(from));
}


void RichStatus::MergeFrom(const RichStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:orchestaror.RichStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_uid()) {
    _internal_mutable_uid()->::orchestaror::Uid::MergeFrom(from._internal_uid());
  }
  if (from._internal_has_err_status()) {
    _internal_mutable_err_status()->::orchestaror::Status::MergeFrom(from._internal_err_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RichStatus::CopyFrom(const RichStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orchestaror.RichStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RichStatus::IsInitialized() const {
  return true;
}

void RichStatus::InternalSwap(RichStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RichStatus, err_status_)
      + sizeof(RichStatus::err_status_)
      - PROTOBUF_FIELD_OFFSET(RichStatus, uid_)>(
          reinterpret_cast<char*>(&uid_),
          reinterpret_cast<char*>(&other->uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RichStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_grpc_5forchestrator_2eproto_getter, &descriptor_table_grpc_5forchestrator_2eproto_once,
      file_level_metadata_grpc_5forchestrator_2eproto[5]);
}

// ===================================================================

class Reply::_Internal {
 public:
};

Reply::Reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:orchestaror.Reply)
}
Reply::Reply(const Reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_str().empty()) {
    str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_str(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:orchestaror.Reply)
}

inline void Reply::SharedCtor() {
str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:orchestaror.Reply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Reply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Reply::ArenaDtor(void* object) {
  Reply* _this = reinterpret_cast< Reply* >(object);
  (void)_this;
}
void Reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Reply::Clear() {
// @@protoc_insertion_point(message_clear_start:orchestaror.Reply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  str_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string str = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "orchestaror.Reply.str"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Reply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orchestaror.Reply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string str = 1;
  if (!this->_internal_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "orchestaror.Reply.str");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orchestaror.Reply)
  return target;
}

size_t Reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orchestaror.Reply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string str = 1;
  if (!this->_internal_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Reply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Reply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Reply::GetClassData() const { return &_class_data_; }

void Reply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Reply *>(to)->MergeFrom(
      static_cast<const Reply &>(from));
}


void Reply::MergeFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:orchestaror.Reply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_str().empty()) {
    _internal_set_str(from._internal_str());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Reply::CopyFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orchestaror.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {
  return true;
}

void Reply::InternalSwap(Reply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &str_, lhs_arena,
      &other->str_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Reply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_grpc_5forchestrator_2eproto_getter, &descriptor_table_grpc_5forchestrator_2eproto_once,
      file_level_metadata_grpc_5forchestrator_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace orchestaror
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::orchestaror::ProgramListReq* Arena::CreateMaybeMessage< ::orchestaror::ProgramListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orchestaror::ProgramListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::orchestaror::ProgramList* Arena::CreateMaybeMessage< ::orchestaror::ProgramList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orchestaror::ProgramList >(arena);
}
template<> PROTOBUF_NOINLINE ::orchestaror::CMD* Arena::CreateMaybeMessage< ::orchestaror::CMD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orchestaror::CMD >(arena);
}
template<> PROTOBUF_NOINLINE ::orchestaror::Uid* Arena::CreateMaybeMessage< ::orchestaror::Uid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orchestaror::Uid >(arena);
}
template<> PROTOBUF_NOINLINE ::orchestaror::Status* Arena::CreateMaybeMessage< ::orchestaror::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orchestaror::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::orchestaror::RichStatus* Arena::CreateMaybeMessage< ::orchestaror::RichStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orchestaror::RichStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::orchestaror::Reply* Arena::CreateMaybeMessage< ::orchestaror::Reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orchestaror::Reply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
